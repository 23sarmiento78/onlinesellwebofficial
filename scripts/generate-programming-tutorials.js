// scripts/generate-programming-tutorials.js
// Genera tutoriales de programaci√≥n paso a paso usando Gemini

import fs from 'fs';
import { join, resolve, dirname } from 'path';
import { fileURLToPath } from 'url';
import axios from 'axios';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TEMPLATE_PATH = resolve(__dirname, '../templates/article-template.html');
const OUTPUT_DIR = resolve(__dirname, '../public/blog');

if (!GEMINI_API_KEY) {
  console.error('‚ùå Falta la variable de entorno GEMINI_API_KEY');
  process.exit(1);
}

// Tutoriales de programaci√≥n paso a paso
const programmingTutorials = {
  'JavaScript': [
    'Crear una calculadora con JavaScript desde cero',
    'Todo List app con JavaScript vanilla',
    'Juego de memoria con JavaScript',
    'API Weather App con JavaScript',
    'Slider de im√°genes interactivo',
    'Validador de formularios JavaScript',
    'Cron√≥metro digital con JavaScript',
    'Generador de contrase√±as aleatorias'
  ],
  'React': [
    'Primera app React: Lista de tareas',
    'E-commerce b√°sico con React',
    'Blog personal con React y Markdown',
    'Chat en tiempo real con React',
    'Dashboard de analytics con React',
    'Galer√≠a de fotos con React',
    'Buscador de pel√≠culas con React',
    'App de notas con React Hooks'
  ],
  'Node.js': [
    'API REST completa con Express',
    'Sistema de autenticaci√≥n con JWT',
    'Chat server con Socket.io',
    'File upload system con Multer',
    'Blog backend con MongoDB',
    'URL Shortener con Node.js',
    'Email sender con Nodemailer',
    'Rate limiting y middleware'
  ],
  'CSS': [
    'Landing page responsive desde cero',
    'Animaciones CSS avanzadas',
    'Grid layout moderno con CSS',
    'Dark mode toggle con CSS',
    'Loader animations con CSS',
    'Card components con CSS',
    'Navigation menu responsive',
    'Form styling moderno'
  ],
  'Python': [
    'Web scraper con BeautifulSoup',
    'API REST con FastAPI',
    'Chatbot b√°sico con Python',
    'Analizador de datos con Pandas',
    'Juego de adivinanzas en Python',
    'Generador de QR codes',
    'Password manager con Python',
    'Email automation con Python'
  ]
};

// Funci√≥n para generar tutorial paso a paso
async function generateProgrammingTutorial(topic, language) {
  const prompt = `Eres un instructor experto de programaci√≥n que crea tutoriales pr√°cticos paso a paso.

Lenguaje/Tecnolog√≠a: "${language}"
Proyecto: "${topic}"

Crea un tutorial completo y pr√°ctico que incluya:

1. Introducci√≥n del proyecto y objetivos
2. Requisitos previos y herramientas necesarias
3. Estructura del proyecto (archivos y carpetas)
4. Desarrollo paso a paso con c√≥digo completo
5. Explicaci√≥n detallada de cada paso
6. Testing y debugging
7. Posibles mejoras y extensiones
8. Conclusi√≥n y recursos adicionales

REQUISITOS T√âCNICOS:
- C√≥digo funcional y completo (no fragmentos)
- Explicaciones claras de cada l√≠nea importante
- Buenas pr√°cticas y patrones de desarrollo
- Manejo de errores donde sea necesario
- Comentarios en el c√≥digo cuando sea √∫til
- Al menos 2000 palabras de contenido
- Incluir capturas de pantalla conceptuales (describe qu√© se ver√≠a)

ESTRUCTURA HTML:
- Usa: <h2>, <h3>, <h4>, <p>, <ul>, <ol>, <li>, <blockquote>, <code>, <pre>, <strong>, <em>
- C√≥digo en bloques <pre><code class="language-${language.toLowerCase()}">
- Usa <blockquote> para tips importantes
- Divide en secciones claras con subt√≠tulos

Genera SOLO el contenido HTML que va dentro del <main>, sin estructura adicional ni backticks.`;

  try {
    console.log(`üíª Generando tutorial: ${topic} [${language}]`);
    
    const res = await axios.post(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',
      {
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 16000
        }
      },
      {
        params: { key: GEMINI_API_KEY },
        headers: { 'Content-Type': 'application/json' },
        timeout: 90000
      }
    );

    let content = res.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!content) {
      throw new Error('No se pudo obtener el contenido del tutorial de Gemini');
    }
    
    // Extraer metadatos
    const titleMatch = content.match(/<h2[^>]*>([^<]+)<\/h2>/i);
    const title = titleMatch ? titleMatch[1] : topic;
    
    const summaryMatch = content.match(/<p[^>]*>([^<]{100,300})<\/p>/i);
    const summary = summaryMatch ? summaryMatch[1].substring(0, 160) + '...' : `Tutorial completo: ${topic} con ${language}`;
    
    // Generar slug
    const slug = title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-+|-+$/g, '')
      .substring(0, 40);
    
    // Generar keywords
    const keywords = generateTutorialKeywords(topic, language, content);
    
    // Calcular tiempo de lectura
    const wordCount = content.split(/\s+/).length;
    const readingTime = Math.ceil(wordCount / 200);
    
    // Determinar dificultad
    const difficulty = determineDifficulty(topic, content);
    
    // Crear el art√≠culo completo
    const articleData = {
      title,
      summary,
      content,
      category: 'Tutorial',
      language,
      slug,
      keywords: keywords.join(', '),
      readingTime,
      publishDate: new Date().toISOString().split('T')[0],
      difficulty,
      projectType: determineProjectType(topic),
      technologies: extractTechnologies(content, language)
    };

    return articleData;

  } catch (error) {
    console.error(`‚ùå Error generando tutorial para "${topic}":`, error.message);
    return null;
  }
}

// Funci√≥n para generar keywords de tutorial
function generateTutorialKeywords(topic, language, content) {
  const baseKeywords = [
    'tutorial programaci√≥n',
    'proyecto programaci√≥n',
    'c√≥digo paso a paso',
    'desarrollo web',
    'programming tutorial',
    language.toLowerCase()
  ];

  const languageKeywords = {
    'JavaScript': ['js', 'vanilla javascript', 'frontend', 'dom'],
    'React': ['react.js', 'components', 'hooks', 'jsx'],
    'Node.js': ['nodejs', 'backend', 'express', 'npm'],
    'CSS': ['styles', 'responsive', 'flexbox', 'grid'],
    'Python': ['python3', 'script', 'automation', 'backend']
  };

  const contentKeywords = [];
  const lowerContent = content.toLowerCase();
  
  // Extraer keywords t√©cnicas del contenido
  ['api', 'database', 'authentication', 'responsive', 'animation', 'async', 'fetch', 'crud']
    .forEach(keyword => {
      if (lowerContent.includes(keyword)) contentKeywords.push(keyword);
    });

  return [...baseKeywords, ...(languageKeywords[language] || []), ...contentKeywords].slice(0, 12);
}

// Funci√≥n para determinar dificultad
function determineDifficulty(topic, content) {
  const beginnerWords = ['b√°sico', 'simple', 'primer', 'introducci√≥n', 'desde cero'];
  const intermediateWords = ['intermedio', 'api', 'database', 'authentication'];
  const advancedWords = ['avanzado', 'optimizaci√≥n', 'performance', 'complejo'];
  
  const lowerTopic = topic.toLowerCase();
  const lowerContent = content.toLowerCase();
  
  if (advancedWords.some(word => lowerTopic.includes(word) || lowerContent.includes(word))) {
    return 'Avanzado';
  } else if (intermediateWords.some(word => lowerTopic.includes(word) || lowerContent.includes(word))) {
    return 'Intermedio';
  }
  return 'Principiante';
}

// Funci√≥n para determinar tipo de proyecto
function determineProjectType(topic) {
  const lowerTopic = topic.toLowerCase();
  
  if (lowerTopic.includes('app') || lowerTopic.includes('aplicaci√≥n')) return 'Aplicaci√≥n';
  if (lowerTopic.includes('api') || lowerTopic.includes('backend')) return 'Backend';
  if (lowerTopic.includes('web') || lowerTopic.includes('landing')) return 'Website';
  if (lowerTopic.includes('juego') || lowerTopic.includes('game')) return 'Juego';
  if (lowerTopic.includes('chat') || lowerTopic.includes('social')) return 'Social';
  
  return 'Proyecto Web';
}

// Funci√≥n para extraer tecnolog√≠as
function extractTechnologies(content, language) {
  const technologies = [language];
  const lowerContent = content.toLowerCase();
  
  const techMap = {
    'html': 'HTML',
    'css': 'CSS', 
    'javascript': 'JavaScript',
    'react': 'React',
    'node': 'Node.js',
    'express': 'Express',
    'mongodb': 'MongoDB',
    'mysql': 'MySQL',
    'bootstrap': 'Bootstrap',
    'tailwind': 'Tailwind CSS'
  };
  
  Object.entries(techMap).forEach(([key, value]) => {
    if (lowerContent.includes(key) && !technologies.includes(value)) {
      technologies.push(value);
    }
  });
  
  return technologies;
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2);
  const countArg = args.find(arg => arg.startsWith('--count='));
  const count = countArg ? parseInt(countArg.split('=')[1]) : 2;

  console.log(`üöÄ Iniciando generaci√≥n de ${count} tutoriales de programaci√≥n...`);

  // Crear directorio de salida
  const outputDir = join(__dirname, 'generated-tutorials');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Seleccionar tutoriales diversos
  const languages = Object.keys(programmingTutorials);
  const selectedTutorials = [];
  
  for (let i = 0; i < count; i++) {
    const language = languages[i % languages.length];
    const tutorials = programmingTutorials[language];
    const topic = tutorials[Math.floor(Math.random() * tutorials.length)];
    selectedTutorials.push({ topic, language });
  }

  const generatedTutorials = [];

  for (const { topic, language } of selectedTutorials) {
    const tutorialData = await generateProgrammingTutorial(topic, language);
    
    if (tutorialData) {
      // Generar archivo HTML
      await generateTutorialHTML(tutorialData, outputDir);
      generatedTutorials.push(tutorialData);
      
      // Esperar entre generaciones
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }

  // Guardar √≠ndice
  const indexPath = join(__dirname, 'generated-tutorials-index.json');
  fs.writeFileSync(indexPath, JSON.stringify(generatedTutorials, null, 2));

  console.log(`‚úÖ Generados ${generatedTutorials.length} tutoriales de programaci√≥n`);
  console.log(`üìÅ Archivos guardados en: ${outputDir}`);
  console.log(`üìã √çndice guardado en: ${indexPath}`);
}

// Funci√≥n para generar HTML del tutorial
async function generateTutorialHTML(tutorialData, outputDir) {
  try {
    // Usar template b√°sico si no existe el espec√≠fico para tutoriales
    let templatePath = join(__dirname, '../templates/tutorial-template.html');
    if (!fs.existsSync(templatePath)) {
      templatePath = join(__dirname, '../templates/article-template.html');
    }
    
    let template = fs.readFileSync(templatePath, 'utf8');
    
    // Reemplazar placeholders
    template = template
      .replace(/{{TITLE}}/g, tutorialData.title)
      .replace(/{{SEO_TITLE}}/g, `${tutorialData.title} | Tutorial ${tutorialData.language}`)
      .replace(/{{SEO_DESCRIPTION}}/g, tutorialData.summary)
      .replace(/{{SEO_KEYWORDS}}/g, tutorialData.keywords)
      .replace(/{{CONTENT}}/g, tutorialData.content)
      .replace(/{{CATEGORY}}/g, tutorialData.category)
      .replace(/{{LANGUAGE}}/g, tutorialData.language)
      .replace(/{{READING_TIME}}/g, tutorialData.readingTime)
      .replace(/{{PUBLISH_DATE}}/g, tutorialData.publishDate)
      .replace(/{{DIFFICULTY}}/g, tutorialData.difficulty)
      .replace(/{{PROJECT_TYPE}}/g, tutorialData.projectType)
      .replace(/{{TECHNOLOGIES}}/g, tutorialData.technologies.join(', '))
      .replace(/{{CANONICAL_URL}}/g, `https://hgaruna.org/tutoriales/${tutorialData.slug}.html`);

    // Guardar archivo HTML
    const fileName = `${tutorialData.slug}.html`;
    const filePath = join(outputDir, fileName);
    fs.writeFileSync(filePath, template);
    
    console.log(`‚úÖ Tutorial generado: ${fileName}`);
    
  } catch (error) {
    console.error(`‚ùå Error generando HTML del tutorial:`, error.message);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { generateProgrammingTutorial };
