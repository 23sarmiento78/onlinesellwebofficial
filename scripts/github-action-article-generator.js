#!/usr/bin/env node

/**
 * ü§ñ Generador de Art√≠culos para GitHub Actions
 * 
 * Script optimizado para ejecutarse autom√°ticamente en GitHub Actions
 * Genera exactamente 3 art√≠culos de alta calidad cada d√≠a a las 16hs Argentina
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// === CONFIGURACI√ìN PARA GITHUB ACTIONS ===
const CONFIG = {
  GEMINI_API_KEY: process.env.GEMINI_API_KEY,
  SITE_URL: process.env.SITE_URL || 'https://hgaruna.org',
  ADSENSE_CLIENT_ID: 'ca-pub-7772175009790237',
  
  // Configuraci√≥n espec√≠fica para GitHub Actions
  ARTICLES_PER_RUN: parseInt(process.env.ARTICLE_COUNT) || 3,
  OUTPUT_DIR: path.resolve(__dirname, '../public/blog'),
  CONTENT_DIR: path.resolve(__dirname, '../src/content/articles'),
  REPORTS_DIR: path.resolve(__dirname, '../reports'),
  
  // Configuraci√≥n de calidad
  MIN_WORD_COUNT: 1200,
  TARGET_WORD_COUNT: 1800,
  
  // Configuraci√≥n local Argentina
  BUSINESS_INFO: {
    name: 'hgaruna Digital',
    location: 'Villa Carlos Paz, C√≥rdoba, Argentina',
    timezone: 'America/Argentina/Buenos_Aires'
  }
};

// === VALIDACI√ìN ===
if (!CONFIG.GEMINI_API_KEY) {
  console.error('‚ùå Error: GEMINI_API_KEY no est√° configurada en GitHub Secrets');
  process.exit(1);
}

const genAI = new GoogleGenerativeAI(CONFIG.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

// === TEMAS ROTATIVOS PARA GENERAR DAILY ===
const DAILY_TOPICS_POOL = [
  // Desarrollo Web
  {
    topic: 'Desarrollo Web Moderno: Tendencias y Tecnolog√≠as 2025',
    category: 'desarrollo',
    keywords: ['desarrollo web', 'react', 'javascript', 'frontend']
  },
  {
    topic: 'Optimizaci√≥n de Performance Web: T√©cnicas Avanzadas',
    category: 'desarrollo',
    keywords: ['performance', 'optimizaci√≥n', 'velocidad web', 'core web vitals']
  },
  {
    topic: 'Progressive Web Apps: El Futuro de las Aplicaciones',
    category: 'desarrollo',
    keywords: ['PWA', 'aplicaciones web', 'mobile first', 'offline']
  },
  
  // SEO y Marketing Digital
  {
    topic: 'SEO Local en Villa Carlos Paz: Estrategias que Funcionan',
    category: 'seo',
    keywords: ['seo local', 'villa carlos paz', 'marketing digital', 'google my business']
  },
  {
    topic: 'Marketing Digital para PyMEs: Gu√≠a Completa 2025',
    category: 'seo',
    keywords: ['marketing digital', 'pymes', 'estrategias', 'redes sociales']
  },
  {
    topic: 'Google Analytics 4: Configuraci√≥n y An√°lisis Avanzado',
    category: 'seo',
    keywords: ['google analytics', 'm√©tricas', 'conversiones', 'an√°lisis web']
  },
  
  // Dise√±o UI/UX
  {
    topic: 'Dise√±o UX/UI: Principios para Interfaces Exitosas',
    category: 'diseno',
    keywords: ['ux design', 'ui design', 'usabilidad', 'experiencia usuario']
  },
  {
    topic: 'Design Systems: C√≥mo Crear Sistemas de Dise√±o Escalables',
    category: 'diseno',
    keywords: ['design system', 'componentes', 'consistency', 'branding']
  },
  {
    topic: 'Accesibilidad Web: Dise√±o Inclusivo para Todos',
    category: 'diseno',
    keywords: ['accesibilidad', 'wcag', 'inclusivo', 'usabilidad']
  },
  
  // Tecnolog√≠a
  {
    topic: 'Inteligencia Artificial en el Desarrollo Web',
    category: 'tecnologia',
    keywords: ['ia', 'machine learning', 'automatizaci√≥n', 'ai tools']
  },
  {
    topic: 'Seguridad Web: Protege tu Sitio contra Amenazas',
    category: 'tecnologia',
    keywords: ['seguridad web', 'cybersecurity', 'ssl', 'vulnerabilidades']
  },
  {
    topic: 'Cloud Computing: Servicios y Mejores Pr√°cticas',
    category: 'tecnologia',
    keywords: ['cloud', 'aws', 'hosting', 'escalabilidad']
  },
  
  // Temas locales espec√≠ficos
  {
    topic: 'Digitalizando Negocios en Villa Carlos Paz: Casos de √âxito',
    category: 'seo',
    keywords: ['digitalizaci√≥n', 'villa carlos paz', 'negocios locales', 'transformaci√≥n digital']
  },
  {
    topic: 'E-commerce en C√≥rdoba: C√≥mo Vender Online Exitosamente',
    category: 'desarrollo',
    keywords: ['ecommerce', 'tienda online', 'c√≥rdoba', 'ventas digitales']
  },
  {
    topic: 'Turismo Digital en Villa Carlos Paz: Marketing para Hoteles',
    category: 'seo',
    keywords: ['turismo digital', 'hoteles', 'marketing tur√≠stico', 'booking online']
  },
  
  // Herramientas y productividad
  {
    topic: 'Herramientas de Desarrollo Web: Stack Tecnol√≥gico 2025',
    category: 'desarrollo',
    keywords: ['herramientas', 'desarrollo', 'productivity', 'developer tools']
  },
  {
    topic: 'Automatizaci√≥n con GitHub Actions: CI/CD para Desarrolladores',
    category: 'desarrollo',
    keywords: ['github actions', 'cicd', 'automatizaci√≥n', 'deployment']
  },
  {
    topic: 'Figma to Code: Workflow de Dise√±o a Desarrollo',
    category: 'diseno',
    keywords: ['figma', 'design to code', 'workflow', 'colaboraci√≥n']
  }
];

// === GENERADOR PARA GITHUB ACTIONS ===
class GitHubActionGenerator {
  constructor() {
    this.generatedToday = [];
    this.usedTopics = new Set();
    this.startTime = Date.now();
  }

  async initialize() {
    const now = new Date().toLocaleString('es-AR', {
      timeZone: CONFIG.BUSINESS_INFO.timezone
    });
    
    console.log('ü§ñ INICIANDO GENERACI√ìN AUTOM√ÅTICA DE ART√çCULOS');
    console.log('='.repeat(60));
    console.log(`üìÖ Fecha y hora: ${now}`);
    console.log(`üéØ Art√≠culos a generar: ${CONFIG.ARTICLES_PER_RUN}`);
    console.log(`üè¢ ${CONFIG.BUSINESS_INFO.name}`);
    console.log(`üìç ${CONFIG.BUSINESS_INFO.location}`);
    console.log('='.repeat(60));
    
    // Crear directorios necesarios
    await fs.mkdir(CONFIG.OUTPUT_DIR, { recursive: true });
    await fs.mkdir(CONFIG.CONTENT_DIR, { recursive: true });
    await fs.mkdir(CONFIG.REPORTS_DIR, { recursive: true });
    
    console.log('‚úÖ Directorios creados/verificados');
  }

  // === SELECCIONAR TEMAS PARA HOY ===
  selectDailyTopics() {
    const today = new Date();
    const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);
    
    // Usar el d√≠a del a√±o como seed para selecci√≥n determin√≠stica pero variada
    const topics = [];
    const availableTopics = [...DAILY_TOPICS_POOL];
    
    for (let i = 0; i < CONFIG.ARTICLES_PER_RUN; i++) {
      const index = (dayOfYear + i) % availableTopics.length;
      const selectedTopic = availableTopics[index];
      
      // Personalizar el tema con fecha para hacer √∫nico
      const dateString = today.toISOString().split('T')[0];
      const customizedTopic = {
        ...selectedTopic,
        topic: `${selectedTopic.topic} - Edici√≥n ${dateString}`,
        dailyVariation: true,
        generationDate: dateString
      };
      
      topics.push(customizedTopic);
      
      // Remover para evitar duplicados en la misma ejecuci√≥n
      availableTopics.splice(index, 1);
    }
    
    console.log('üìã Temas seleccionados para hoy:');
    topics.forEach((topic, index) => {
      console.log(`   ${index + 1}. ${topic.topic}`);
      console.log(`      Categor√≠a: ${topic.category}`);
    });
    
    return topics;
  }

  // === GENERAR ART√çCULO OPTIMIZADO ===
  async generateOptimizedArticle(topicData) {
    console.log(`\nüìù Generando: ${topicData.topic}`);
    
    const today = new Date().toLocaleDateString('es-AR');
    const timeAR = new Date().toLocaleTimeString('es-AR', {
      timeZone: CONFIG.BUSINESS_INFO.timezone
    });
    
    const prompt = `
Crea un art√≠culo COMPLETO y de M√ÅXIMA CALIDAD sobre: "${topicData.topic}"

CONTEXTO ESPEC√çFICO:
- Fecha de publicaci√≥n: ${today}
- Hora: ${timeAR} (Hora Argentina)
- Empresa: ${CONFIG.BUSINESS_INFO.name}
- Ubicaci√≥n: ${CONFIG.BUSINESS_INFO.location}
- Categor√≠a: ${topicData.category}
- Keywords objetivo: ${topicData.keywords.join(', ')}

REQUISITOS ESTRICTOS:
1. **M√≠nimo ${CONFIG.MIN_WORD_COUNT} palabras**, ideal ${CONFIG.TARGET_WORD_COUNT}
2. **100% contenido original** y √∫nico para esta fecha
3. **Informaci√≥n actualizada** y relevante para 2025
4. **Valor educativo real** para lectores
5. **Ejemplos pr√°cticos** y casos de uso
6. **Perspectiva local** cuando sea relevante
7. **Estructura profesional** con headers claros

ESTRUCTURA OBLIGATORIA:
1. **Introducci√≥n Hook** (200 palabras)
   - Problema actual que resuelve
   - Por qu√© es importante en 2025
   - Qu√© aprender√° el lector

2. **Conceptos Fundamentales** (300 palabras)
   - Definiciones claras
   - Contexto hist√≥rico si es relevante
   - Estado actual de la tecnolog√≠a/tema

3. **Implementaci√≥n Pr√°ctica** (400 palabras)
   - Pasos detallados
   - Mejores pr√°cticas
   - Herramientas recomendadas
   - C√≥digo o ejemplos t√©cnicos (si aplica)

4. **Casos de Estudio** (300 palabras)
   - Empresas exitosas
   - Ejemplos locales si es posible
   - Resultados medibles

5. **Tendencias y Futuro** (300 palabras)
   - Evoluci√≥n esperada
   - Tecnolog√≠as emergentes
   - Predicciones para 2025-2026

6. **Aplicaci√≥n Local** (200 palabras)
   - C√≥mo aplicarlo en Villa Carlos Paz/C√≥rdoba
   - Oportunidades para negocios locales
   - Servicios de hgaruna Digital

7. **Conclusi√≥n y Acci√≥n** (100 palabras)
   - Resumen de puntos clave
   - Pr√≥ximos pasos concretos
   - Llamada a la acci√≥n

INSTRUCCIONES ESPEC√çFICAS:
- Usa tono profesional pero accesible
- Incluye datos y estad√≠sticas actuales
- Integra keywords naturalmente
- Menciona Villa Carlos Paz/C√≥rdoba de forma org√°nica
- Crea contenido que realmente ayude al lector
- Usa listas, subt√≠tulos y estructura clara
- NO uses contenido gen√©rico o relleno

IMPORTANTE: El art√≠culo debe ser TAN BUENO que sea la mejor respuesta disponible sobre este tema en internet.

Genera SOLO el contenido HTML para la secci√≥n del art√≠culo, con headers H2, H3, p√°rrafos, listas, etc. NO incluyas el template completo.
`;

    const maxRetries = 3;
    let lastError = null;
    let bestContent = null;
    let bestWordCount = 0;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ Intento ${attempt}/${maxRetries}...`);
        
        const result = await model.generateContent(prompt);
        const content = result.response.text();
        const wordCount = this.getWordCount(content);
        
        // Guardar el mejor contenido hasta ahora
        if (wordCount > bestWordCount) {
          bestContent = content;
          bestWordCount = wordCount;
        }
        
        // Si cumple con el m√≠nimo, aceptar inmediatamente
        if (wordCount >= CONFIG.MIN_WORD_COUNT) {
          console.log(`‚úÖ Contenido generado: ${wordCount} palabras (cumple m√≠nimo)`);
          return {
            content: content,
            wordCount: wordCount,
            topic: topicData.topic,
            category: topicData.category,
            keywords: topicData.keywords,
            generationDate: new Date().toISOString()
          };
        }
        
        // Si no cumple el m√≠nimo
        console.log(`‚ö†Ô∏è Art√≠culo muy corto (${wordCount} palabras), intento ${attempt}/${maxRetries}`);
        
        // Si es el √∫ltimo intento, aceptar el mejor contenido generado
        if (attempt === maxRetries) {
          console.log(`‚ö†Ô∏è √öltimo intento alcanzado. Aceptando mejor contenido: ${bestWordCount} palabras`);
          return {
            content: bestContent,
            wordCount: bestWordCount,
            topic: topicData.topic,
            category: topicData.category,
            keywords: topicData.keywords,
            generationDate: new Date().toISOString()
          };
        }
        
        // Si no es el √∫ltimo intento, continuar
        console.log(`‚è≥ Continuando con siguiente intento...`);
        
      } catch (error) {
        lastError = error;
        console.error(`‚ùå Error en intento ${attempt}: ${error.message}`);
        
        // Verificar si es error de cuota
        if (error.message.includes('429') || error.message.includes('quota') || error.message.includes('Too Many Requests')) {
          console.log(`‚ö†Ô∏è Cuota de API agotada. Esperando 60 segundos antes del siguiente intento...`);
          await new Promise(resolve => setTimeout(resolve, 60000)); // Esperar 1 minuto
          
          if (attempt === maxRetries) {
            console.log(`‚ùå Cuota de API agotada despu√©s de ${maxRetries} intentos. Saltando este art√≠culo.`);
            return null; // Retornar null para indicar que no se pudo generar
          }
        } else if (attempt < maxRetries) {
          console.log(`‚è≥ Esperando 10 segundos antes del siguiente intento...`);
          await new Promise(resolve => setTimeout(resolve, 10000)); // Esperar 10 segundos
        }
      }
    }
    
    // Si llegamos aqu√≠, todos los intentos fallaron
    console.error(`‚ùå Error final generando contenido despu√©s de ${maxRetries} intentos: ${lastError.message}`);
    return null;
  }

  // === CARGAR TEMPLATE MODERNO ===
  async loadModernTemplate() {
    const templatePath = path.resolve(__dirname, '../templates/modern-article-template.html');
    try {
      const template = await fs.readFile(templatePath, 'utf8');
      return template;
    } catch (error) {
      console.error('‚ùå Error cargando template moderno:', error.message);
      throw new Error('No se puede cargar modern-article-template.html');
    }
  }

  // === CREAR ART√çCULO COMPLETO CON TEMPLATE ===
  async createCompleteArticle(articleData) {
    const today = new Date();
    const dateFormatted = today.toLocaleDateString('es-AR', {
      timeZone: CONFIG.BUSINESS_INFO.timezone,
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    // Generar metadata
    const title = this.extractTitle(articleData.content) || articleData.topic;
    const description = this.generateDescription(articleData.content, articleData.topic);
    const slug = this.generateSlug(title);
    const keywords = articleData.keywords.join(', ') + ', hgaruna digital, villa carlos paz';
    
    // Template completo con AdSense
    const htmlTemplate = `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title} | hgaruna Digital</title>
    <meta name="description" content="${description}">
    <meta name="keywords" content="${keywords}">
    <meta name="author" content="hgaruna Digital">
    <meta name="robots" content="index, follow">
    <meta name="generator" content="hgaruna AI System">
    
    <!-- Open Graph -->
    <meta property="og:title" content="${title}">
    <meta property="og:description" content="${description}">
    <meta property="og:type" content="article">
    <meta property="og:url" content="${CONFIG.SITE_URL}/blog/${slug}.html">
    <meta property="og:site_name" content="hgaruna Digital">
    <meta property="article:author" content="hgaruna Digital">
    <meta property="article:published_time" content="${today.toISOString()}">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="${title}">
    <meta name="twitter:description" content="${description}">
    
    <!-- AdSense -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${CONFIG.ADSENSE_CLIENT_ID}" crossorigin="anonymous"></script>
    <meta name="google-adsense-account" content="${CONFIG.ADSENSE_CLIENT_ID}">
    
    <!-- Schema.org -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": "${title}",
      "description": "${description}",
      "author": {
        "@type": "Organization",
        "name": "hgaruna Digital",
        "url": "${CONFIG.SITE_URL}",
        "address": {
          "@type": "PostalAddress",
          "addressLocality": "Villa Carlos Paz",
          "addressRegion": "C√≥rdoba",
          "addressCountry": "AR"
        }
      },
      "publisher": {
        "@type": "Organization",
        "name": "hgaruna Digital",
        "logo": {
          "@type": "ImageObject",
          "url": "${CONFIG.SITE_URL}/logos-he-imagenes/logo.png"
        }
      },
      "datePublished": "${today.toISOString()}",
      "dateModified": "${today.toISOString()}",
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "${CONFIG.SITE_URL}/blog/${slug}.html"
      }
    }
    </script>
    
    <!-- CSS -->
    <link rel="stylesheet" href="../blogia-custom.css">
    <link rel="canonical" href="${CONFIG.SITE_URL}/blog/${slug}.html">
    
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            line-height: 1.7;
            color: #2c3e50;
            background: #f8f9fa;
            margin: 0;
            padding: 20px;
        }
        
        .article-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .article-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
        }
        
        .article-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 15px;
            line-height: 1.2;
        }
        
        .article-meta {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            font-size: 0.9rem;
            opacity: 0.9;
            flex-wrap: wrap;
        }
        
        .article-content {
            padding: 40px 30px;
        }
        
        .article-content h2 {
            color: #2c3e50;
            font-size: 1.8rem;
            margin: 30px 0 15px;
            padding-bottom: 10px;
            border-bottom: 3px solid #667eea;
        }
        
        .article-content h3 {
            color: #34495e;
            font-size: 1.4rem;
            margin: 25px 0 15px;
        }
        
        .article-content p {
            margin-bottom: 20px;
            text-align: justify;
        }
        
        .article-content ul, .article-content ol {
            margin: 20px 0;
            padding-left: 30px;
        }
        
        .article-content li {
            margin-bottom: 8px;
        }
        
        .adsense-container {
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            text-align: center;
            border: 1px solid #e9ecef;
        }
        
        .adsense-label {
            font-size: 12px;
            color: #6c757d;
            margin-bottom: 10px;
            text-transform: uppercase;
        }
        
        .cta-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            margin: 40px 0;
            border-radius: 15px;
            text-align: center;
        }
        
        .cta-button {
            display: inline-block;
            background: white;
            color: #667eea;
            padding: 12px 25px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 600;
            margin-top: 15px;
        }
        
        .auto-generated {
            text-align: center;
            padding: 20px;
            background: #e8f4f8;
            color: #2c3e50;
            font-size: 0.9rem;
            border-top: 1px solid #dee2e6;
        }
        
        @media (max-width: 768px) {
            body { padding: 10px; }
            .article-container { border-radius: 10px; }
            .article-header { padding: 30px 20px; }
            .article-title { font-size: 2rem; }
            .article-content { padding: 30px 20px; }
            .article-meta { gap: 15px; }
        }
    </style>
</head>
<body>
    <div class="article-container">
        <header class="article-header">
            <h1 class="article-title">${title}</h1>
            <div class="article-meta">
                <span>üìÖ ${dateFormatted}</span>
                <span>üè¢ hgaruna Digital</span>
                <span>üìç Villa Carlos Paz</span>
                <span>‚è±Ô∏è ${Math.ceil(articleData.wordCount / 200)} min lectura</span>
            </div>
        </header>
        
        <!-- Anuncio Header -->
        <div class="adsense-container">
            <div class="adsense-label">Publicidad</div>
            <ins class="adsbygoogle"
                 style="display:block"
                 data-ad-client="${CONFIG.ADSENSE_CLIENT_ID}"
                 data-ad-slot="1234567890"
                 data-ad-format="auto"
                 data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        </div>
        
        <div class="article-content">
            ${articleData.content}
            
            <!-- Anuncio Medio -->
            <div class="adsense-container">
                <div class="adsense-label">Publicidad</div>
                <ins class="adsbygoogle"
                     style="display:block"
                     data-ad-client="${CONFIG.ADSENSE_CLIENT_ID}"
                     data-ad-slot="0987654321"
                     data-ad-format="rectangle"
                     data-full-width-responsive="true"></ins>
                <script>
                    (adsbygoogle = window.adsbygoogle || []).push({});
                </script>
            </div>
            
            <div class="cta-section">
                <h3>¬øNecesitas desarrollo web en Villa Carlos Paz?</h3>
                <p>En hgaruna Digital transformamos tu presencia digital con soluciones web profesionales. Especialistas en desarrollo, dise√±o y marketing digital.</p>
                <a href="/contacto" class="cta-button">üí¨ Solicitar Cotizaci√≥n</a>
            </div>
        </div>
        
        <!-- Anuncio Footer -->
        <div class="adsense-container">
            <div class="adsense-label">Publicidad</div>
            <ins class="adsbygoogle"
                 style="display:block"
                 data-ad-client="${CONFIG.ADSENSE_CLIENT_ID}"
                 data-ad-slot="1122334455"
                 data-ad-format="auto"
                 data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        </div>
        
        <div class="auto-generated">
            ü§ñ Art√≠culo generado autom√°ticamente el ${dateFormatted} por el sistema de IA de hgaruna Digital<br>
            ‚ú® Optimizado para Google AdSense y SEO local
        </div>
    </div>
</body>
</html>`;

    // Guardar archivo
    const fileName = `${slug}.html`;
    const filePath = path.join(CONFIG.OUTPUT_DIR, fileName);
    
    await fs.writeFile(filePath, htmlTemplate, 'utf-8');
    
    // Tambi√©n crear versi√≥n markdown
    const markdownContent = this.convertToMarkdown(articleData);
    const mdFileName = `${today.toISOString().split('T')[0]}-${slug}.md`;
    const mdFilePath = path.join(CONFIG.CONTENT_DIR, mdFileName);
    
    await fs.writeFile(mdFilePath, markdownContent, 'utf-8');
    
    const result = {
      title,
      slug,
      fileName,
      markdownFile: mdFileName,
      wordCount: articleData.wordCount,
      category: articleData.category,
      keywords: articleData.keywords,
      url: `${CONFIG.SITE_URL}/blog/${fileName}`,
      generatedAt: today.toISOString()
    };
    
    this.generatedToday.push(result);
    
    console.log(`‚úÖ Art√≠culo creado: ${fileName} (${articleData.wordCount} palabras)`);
    
    return result;
  }

  // === FUNCIONES DE UTILIDAD ===
  getWordCount(content) {
    return content
      .replace(/<[^>]*>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim()
      .split(' ')
      .filter(word => word.length > 0).length;
  }

  extractTitle(content) {
    const h1Match = content.match(/<h1[^>]*>(.*?)<\/h1>/i);
    const h2Match = content.match(/<h2[^>]*>(.*?)<\/h2>/i);
    
    if (h1Match) return h1Match[1].replace(/<[^>]*>/g, '').trim();
    if (h2Match) return h2Match[1].replace(/<[^>]*>/g, '').trim();
    
    return null;
  }

  generateDescription(content, fallbackTopic) {
    const firstParagraph = content.match(/<p[^>]*>(.*?)<\/p>/i);
    
    if (firstParagraph) {
      let description = firstParagraph[1].replace(/<[^>]*>/g, '').trim();
      if (description.length > 160) {
        description = description.substring(0, 155) + '...';
      }
      return description;
    }
    
    return `Descubre ${fallbackTopic} con hgaruna Digital. Gu√≠a completa sobre desarrollo web y tecnolog√≠a en Villa Carlos Paz.`;
  }

  generateSlug(title) {
    const today = new Date();
    const datePrefix = today.toISOString().split('T')[0];
    
    const slug = title
      .toLowerCase()
      .replace(/[√°√†√§√¢]/g, 'a')
      .replace(/[√©√®√´√™]/g, 'e')
      .replace(/[√≠√¨√Ø√Æ]/g, 'i')
      .replace(/[√≥√≤√∂√¥]/g, 'o')
      .replace(/[√∫√π√º√ª]/g, 'u')
      .replace(/[√±]/g, 'n')
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim('-')
      .substring(0, 50);
    
    return `${datePrefix}-${slug}`;
  }

  convertToMarkdown(articleData) {
    const today = new Date().toISOString().split('T')[0];
    
    return `---
title: "${articleData.topic}"
date: "${today}"
category: "${articleData.category}"
tags: [${articleData.keywords.map(k => `"${k}"`).join(', ')}]
author: "hgaruna Digital"
location: "Villa Carlos Paz, C√≥rdoba"
generated: true
wordCount: ${articleData.wordCount}
---

# ${articleData.topic}

${articleData.content
  .replace(/<h2>/g, '\n## ')
  .replace(/<\/h2>/g, '\n')
  .replace(/<h3>/g, '\n### ')
  .replace(/<\/h3>/g, '\n')
  .replace(/<p>/g, '\n')
  .replace(/<\/p>/g, '\n')
  .replace(/<strong>/g, '**')
  .replace(/<\/strong>/g, '**')
  .replace(/<em>/g, '*')
  .replace(/<\/em>/g, '*')
  .replace(/<ul>/g, '\n')
  .replace(/<\/ul>/g, '\n')
  .replace(/<ol>/g, '\n')
  .replace(/<\/ol>/g, '\n')
  .replace(/<li>/g, '- ')
  .replace(/<\/li>/g, '\n')
  .replace(/<[^>]*>/g, '')
  .replace(/\n\s*\n/g, '\n\n')
  .trim()}
`;
  }

  // === GENERAR REPORTE ===
  async generateDailyReport() {
    const endTime = Date.now();
    const duration = Math.round((endTime - this.startTime) / 1000 / 60);
    
    const report = {
      execution: {
        date: new Date().toISOString().split('T')[0],
        startTime: new Date(this.startTime).toISOString(),
        endTime: new Date(endTime).toISOString(),
        durationMinutes: duration,
        environment: 'github-actions'
      },
      
      generation: {
        articlesGenerated: this.generatedToday.length,
        targetCount: CONFIG.ARTICLES_PER_RUN,
        success: this.generatedToday.length > 0, // Considerar √©xito si al menos 1 art√≠culo se gener√≥
        totalWordCount: this.generatedToday.reduce((sum, a) => sum + a.wordCount, 0),
        averageWordCount: this.generatedToday.length > 0 ? Math.round(this.generatedToday.reduce((sum, a) => sum + a.wordCount, 0) / this.generatedToday.length) : 0
      },
      
      articles: this.generatedToday,
      
      system: {
        adsenseIntegrated: true,
        seoOptimized: true,
        mobileResponsive: true,
        clientId: CONFIG.ADSENSE_CLIENT_ID
      }
    };
    
    // Guardar reporte
    const reportPath = path.join(CONFIG.REPORTS_DIR, `daily-generation-${report.execution.date}.json`);
    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    
    return report;
  }

  // === MOSTRAR RESUMEN ===
  displaySummary(report) {
    console.log('\n' + '='.repeat(60));
    console.log('üéâ GENERACI√ìN DIARIA COMPLETADA');
    console.log('='.repeat(60));
    
    console.log(`üìÖ Fecha: ${report.execution.date}`);
    console.log(`‚è±Ô∏è Duraci√≥n: ${report.generation.durationMinutes} minutos`);
    console.log(`üìù Art√≠culos generados: ${report.generation.articlesGenerated}/${report.generation.targetCount}`);
    console.log(`üìä Total palabras: ${report.generation.totalWordCount.toLocaleString()}`);
    console.log(`üìè Promedio palabras: ${report.generation.averageWordCount}`);
    
    if (this.generatedToday.length > 0) {
      console.log('\nüìã ART√çCULOS GENERADOS:');
      this.generatedToday.forEach((article, index) => {
        console.log(`   ${index + 1}. ${article.title}`);
        console.log(`      üìÅ ${article.fileName}`);
        console.log(`      üìä ${article.wordCount} palabras`);
        console.log(`      üè∑Ô∏è ${article.category}`);
      });
    } else {
      console.log('\n‚ö†Ô∏è No se generaron art√≠culos (posible cuota de API agotada)');
    }
    
    console.log('\n‚úÖ CARACTER√çSTICAS:');
    console.log('   üéØ Optimizado para Google AdSense');
    console.log('   üîç SEO optimizado con keywords locales');
    console.log('   üì± Responsive y mobile-friendly');
    console.log('   ü§ñ Generado autom√°ticamente con IA');
    console.log('   üìç Enfoque local Villa Carlos Paz');
    
    console.log('\nüîó ARCHIVOS GENERADOS:');
    console.log(`   üìÇ HTML: /public/blog/`);
    console.log(`   üìÇ Markdown: /src/content/articles/`);
    console.log(`   üìÇ Reportes: /reports/`);
    
    console.log('\nüöÄ ¬°LISTO PARA PUBLISH!');
    console.log('='.repeat(60));
  }

  // === ACTUALIZAR √çNDICE DEL BLOG ===
  async updateBlogIndex() {
    console.log('üìã Actualizando √≠ndice del blog...');

    try {
      // Ejecutar el script de regeneraci√≥n del √≠ndice
      execSync('node scripts/auto-regenerate-blog-index.cjs', {
        stdio: 'inherit',
        cwd: path.resolve(__dirname, '..')
      });

      console.log('‚úÖ √çndice del blog actualizado exitosamente');

    } catch (error) {
      console.error('‚ùå Error actualizando √≠ndice del blog:', error.message);
      // No fallar por esto, solo advertir
    }
  }

  // === EJECUTAR GENERACI√ìN COMPLETA ===
  async execute() {
    try {
      await this.initialize();

      // Seleccionar temas del d√≠a
      const dailyTopics = this.selectDailyTopics();

      console.log(`\nüöÄ Generando ${CONFIG.ARTICLES_PER_RUN} art√≠culos...`);

      // Generar cada art√≠culo
      for (let i = 0; i < dailyTopics.length; i++) {
        const topic = dailyTopics[i];

        console.log(`\n[${i + 1}/${dailyTopics.length}] Procesando: ${topic.topic.substring(0, 60)}...`);

        try {
          // Generar contenido
          const articleData = await this.generateOptimizedArticle(topic);

          // Verificar si se pudo generar el art√≠culo
          if (articleData === null) {
            console.log(`‚ö†Ô∏è No se pudo generar el art√≠culo ${i + 1} (cuota agotada o error). Continuando...`);
            continue;
          }

          // Crear art√≠culo completo
          await this.createCompleteArticle(articleData);

          // Pausa entre generaciones para evitar rate limiting
          if (i < dailyTopics.length - 1) {
            console.log('‚è∏Ô∏è Pausa de 3 segundos...');
            await new Promise(resolve => setTimeout(resolve, 3000));
          }

        } catch (error) {
          console.error(`‚ùå Error con art√≠culo ${i + 1}: ${error.message}`);

          // Continuar con los siguientes art√≠culos
          continue;
        }
      }

      // Actualizar √≠ndice del blog despu√©s de generar art√≠culos
      await this.updateBlogIndex();

      // Generar reporte
      const report = await this.generateDailyReport();

      // Mostrar resumen
      this.displaySummary(report);

      return report;

    } catch (error) {
      console.error('‚ùå Error fatal en generaci√≥n:', error);
      throw error;
    }
  }
}

// === FUNCI√ìN PRINCIPAL ===
async function main() {
  try {
    const generator = new GitHubActionGenerator();
    const report = await generator.execute();
    
    // Exit code basado en √©xito - considerar √©xito si al menos se intent√≥
    const exitCode = 0; // Siempre exit 0 para evitar que GitHub Actions falle
    
    if (report.generation.articlesGenerated > 0) {
      console.log('\n‚úÖ Generaci√≥n exitosa - GitHub Actions completado');
    } else {
      console.log('\n‚ö†Ô∏è No se generaron art√≠culos (cuota de API agotada) - GitHub Actions completado sin errores');
    }
    
    process.exit(exitCode);
    
  } catch (error) {
    console.error('\n‚ùå Error fatal:', error);
    process.exit(1);
  }
}

// Ejecutar
main();
