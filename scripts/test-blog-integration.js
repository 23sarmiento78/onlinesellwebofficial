#!/usr/bin/env node

/**
 * üîç Test de Integraci√≥n Blog-GitHub Action
 * 
 * Verifica que la p√°gina de blog y el generador de art√≠culos est√©n correctamente vinculados
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const BLOG_DIR = path.resolve(__dirname, '../public/blog');
const TEMPLATE_PATH = path.resolve(__dirname, '../templates/modern-article-template.html');
const GENERATOR_PATH = path.resolve(__dirname, 'github-action-article-generator-modern.js');

async function testBlogIntegration() {
  console.log('üîç PROBANDO INTEGRACI√ìN BLOG-GITHUB ACTION\n');

  // Test 1: Verificar directorios
  console.log('üìÅ 1. Verificando estructura de directorios...');
  
  try {
    const blogStats = await fs.stat(BLOG_DIR);
    console.log(`‚úÖ Directorio blog existe: ${BLOG_DIR}`);
    
    const blogContents = await fs.readdir(BLOG_DIR);
    console.log(`üìã Contenido actual: ${blogContents.join(', ')}`);
    
    if (blogContents.length <= 2) { // Solo .keep, index.json, etc.
      console.log('‚ö†Ô∏è  El directorio blog est√° vac√≠o (normal si no se han generado art√≠culos)');
    }
  } catch (error) {
    console.log(`‚ùå Error accediendo al directorio blog: ${error.message}`);
  }

  // Test 2: Verificar template moderno
  console.log('\nüìÑ 2. Verificando template moderno...');
  
  try {
    const templateStats = await fs.stat(TEMPLATE_PATH);
    console.log(`‚úÖ Template existe: ${TEMPLATE_PATH}`);
    
    const templateContent = await fs.readFile(TEMPLATE_PATH, 'utf8');
    
    // Verificar variables importantes
    const requiredVars = [
      '{{ARTICLE_TITLE}}',
      '{{ARTICLE_CONTENT}}',
      '{{SEO_TITLE}}',
      '{{CANONICAL_URL}}',
      '{{AUTHOR}}',
      '{{CATEGORY}}'
    ];
    
    const missingVars = requiredVars.filter(varName => !templateContent.includes(varName));
    
    if (missingVars.length === 0) {
      console.log('‚úÖ Template tiene todas las variables necesarias');
    } else {
      console.log(`‚ö†Ô∏è  Variables faltantes en template: ${missingVars.join(', ')}`);
    }
    
    // Verificar AdSense
    if (templateContent.includes('adsbygoogle')) {
      console.log('‚úÖ Template incluye configuraci√≥n AdSense');
    } else {
      console.log('‚ö†Ô∏è  Template no incluye AdSense');
    }
    
  } catch (error) {
    console.log(`‚ùå Error accediendo al template: ${error.message}`);
  }

  // Test 3: Verificar generador moderno
  console.log('\nü§ñ 3. Verificando generador moderno...');
  
  try {
    const generatorStats = await fs.stat(GENERATOR_PATH);
    console.log(`‚úÖ Generador existe: ${GENERATOR_PATH}`);
    
    const generatorContent = await fs.readFile(GENERATOR_PATH, 'utf8');
    
    // Verificar configuraci√≥n
    if (generatorContent.includes('OUTPUT_DIR: path.resolve(__dirname, \'../public/blog\')')) {
      console.log('‚úÖ Generador configurado para escribir en public/blog');
    } else {
      console.log('‚ö†Ô∏è  Generador NO est√° configurado para public/blog');
    }
    
    if (generatorContent.includes('loadModernTemplate')) {
      console.log('‚úÖ Generador usa template moderno');
    } else {
      console.log('‚ö†Ô∏è  Generador NO usa template moderno');
    }
    
  } catch (error) {
    console.log(`‚ùå Error accediendo al generador: ${error.message}`);
  }

  // Test 4: Verificar GitHub Action
  console.log('\n‚öôÔ∏è 4. Verificando GitHub Action...');
  
  try {
    const actionPath = path.resolve(__dirname, '../.github/workflows/generate-articles.yml');
    const actionContent = await fs.readFile(actionPath, 'utf8');
    
    if (actionContent.includes('github-action-article-generator-modern.js')) {
      console.log('‚úÖ GitHub Action usa el generador moderno');
    } else {
      console.log('‚ö†Ô∏è  GitHub Action NO usa el generador moderno');
    }
    
  } catch (error) {
    console.log(`‚ùå Error accediendo al GitHub Action: ${error.message}`);
  }

  // Test 5: Simular creaci√≥n de art√≠culo de prueba
  console.log('\nüß™ 5. Creando art√≠culo de prueba...');
  
  try {
    const testArticleContent = `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test de Integraci√≥n Blog - hgaruna Digital</title>
    <meta name="description" content="Art√≠culo de prueba para verificar la integraci√≥n entre el blog y el sistema de generaci√≥n autom√°tica.">
    <meta name="keywords" content="test, integraci√≥n, blog, hgaruna">
</head>
<body>
    <h1>Test de Integraci√≥n Blog</h1>
    <p>Este es un art√≠culo de prueba para verificar que la integraci√≥n entre el blog moderno y el sistema de generaci√≥n autom√°tica funciona correctamente.</p>
    <h2>Caracter√≠sticas Verificadas</h2>
    <ul>
        <li>Detecci√≥n autom√°tica de art√≠culos</li>
        <li>Extracci√≥n de metadata</li>
        <li>Categorizaci√≥n inteligente</li>
        <li>Ordenamiento por fecha</li>
    </ul>
    <p>Si puedes ver este art√≠culo en el blog, la integraci√≥n est√° funcionando correctamente.</p>
</body>
</html>`;

    const testFileName = `test-integracion-${new Date().toISOString().split('T')[0]}.html`;
    const testFilePath = path.join(BLOG_DIR, testFileName);
    
    await fs.writeFile(testFilePath, testArticleContent, 'utf8');
    console.log(`‚úÖ Art√≠culo de prueba creado: ${testFileName}`);
    console.log(`üìç Ubicaci√≥n: ${testFilePath}`);
    console.log(`üåê URL: /blog/${testFileName}`);
    
    // Actualizar √≠ndice JSON si existe
    try {
      const indexPath = path.join(BLOG_DIR, 'index.json');
      let index = [];
      
      try {
        const indexContent = await fs.readFile(indexPath, 'utf8');
        index = JSON.parse(indexContent);
      } catch {
        // Si no existe, crear nuevo
      }
      
      // A√±adir art√≠culo de prueba al √≠ndice
      const testArticle = {
        slug: testFileName.replace('.html', ''),
        title: 'Test de Integraci√≥n Blog',
        excerpt: 'Art√≠culo de prueba para verificar la integraci√≥n entre el blog y el sistema de generaci√≥n autom√°tica.',
        author: 'hgaruna Digital',
        date: new Date().toISOString(),
        category: 'desarrollo',
        file: testFileName
      };
      
      index.unshift(testArticle); // A√±adir al principio
      
      await fs.writeFile(indexPath, JSON.stringify(index, null, 2), 'utf8');
      console.log(`‚úÖ √çndice JSON actualizado con art√≠culo de prueba`);
      
    } catch (indexError) {
      console.log(`‚ö†Ô∏è  No se pudo actualizar √≠ndice JSON: ${indexError.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå Error creando art√≠culo de prueba: ${error.message}`);
  }

  // Test 6: Verificar acceso web
  console.log('\nüåê 6. Instrucciones para verificar en el navegador...');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ PASOS PARA VERIFICAR EN EL NAVEGADOR:                     ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄÔøΩÔøΩ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  console.log('‚îÇ 1. Abre el navegador y ve a /blog                         ‚îÇ');
  console.log('‚îÇ 2. Verifica que aparezca el art√≠culo de prueba            ‚îÇ');
  console.log('‚îÇ 3. Revisa la consola del navegador para logs              ‚îÇ');
  console.log('‚îÇ 4. Confirma que las categor√≠as funcionen                  ‚îÇ');
  console.log('‚îÇ 5. Prueba el buscador                                     ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

  console.log('\nüìä RESUMEN DE LA INTEGRACI√ìN:');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ ‚úÖ Blog Moderno: src/pages/BlogModern.jsx                 ‚îÇ');
  console.log('‚îÇ ‚úÖ Generador: scripts/github-action-article-generator-modern.js ‚îÇ');
  console.log('‚îÇ ‚úÖ Template: templates/modern-article-template.html       ‚îÇ');
  console.log('‚îÇ ‚úÖ GitHub Action actualizado                              ‚îÇ');
  console.log('‚îÇ ‚úÖ Directorio: public/blog/                               ‚îÇ');
  console.log('‚îÇ ‚úÖ Art√≠culo de prueba creado                              ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

  console.log('\nüöÄ PR√ìXIMOS PASOS AUTOM√ÅTICOS:');
  console.log('1. GitHub Action ejecutar√° diariamente');
  console.log('2. Generar√° 3 art√≠culos nuevos en public/blog/');
  console.log('3. Blog los detectar√° autom√°ticamente');
  console.log('4. AdSense comenzar√° a monetizar');

  console.log('\n‚ú® ¬°INTEGRACI√ìN COMPLETA!');
}

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testBlogIntegration()
    .then(() => {
      console.log('\nüéâ Test de integraci√≥n completado');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Error en test de integraci√≥n:', error);
      process.exit(1);
    });
}

export { testBlogIntegration };
