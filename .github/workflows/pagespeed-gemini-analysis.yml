name: PageSpeed & Gemini Performance Analysis

on:
  push:
    branches:
      - main
  # Este es el disparador para el botón "Run workflow"
  workflow_dispatch:
    # No debe haber nada más aquí, a menos que quieras inputs (que no es tu caso ahora)
    # Por ejemplo, si tuviera 'inputs:', el botón aparecería, pero sin inputs definidos, puede confundir.
    # Lo más seguro es dejarlo simplemente como 'workflow_dispatch:' sin indentar nada debajo.
jobs:
  analyze_performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Paso 1: Establecer la URL del sitio ---
      - name: Set Site URL
        id: set_url
        run: |
          echo "SITE_URL=https://hgaruna.org" >> $GITHUB_ENV

      # --- Paso 2: Ejecutar PageSpeed Insights API ---
      - name: Run PageSpeed Insights Analysis
        id: psi_analysis
        run: |
          PSI_URL="https://www.googleapis.com/pagespeedinsights/v5/runPagespeed?url=${{ env.SITE_URL }}&key=${{ secrets.API_KEY }}&strategy=mobile&locale=es"
          echo "Running PSI for: ${{ env.SITE_URL }}"
          curl -s "$PSI_URL" > pagespeed_report.json
          # Verificamos si curl tuvo un error al guardar el archivo.
          # Si curl falla por un código de error HTTP (ej. 403, 400), no devuelve un JSON.
          if [ ! -s pagespeed_report.json ]; then
            echo "Error: pagespeed_report.json está vacío o no se generó. La llamada a la API de PSI pudo haber fallado."
            exit 1
          fi
          echo "PSI Report generated."
        env:
          API_KEY: ${{ secrets.API_KEY }}

      # --- NUEVO PASO PARA INSPECCIONAR EL CONTENIDO ---
      - name: Inspect Generated PSI Report
        run: |
          echo "--- Contenido de pagespeed_report.json ---"
          cat pagespeed_report.json
          echo "-----------------------------------------"
          # Intenta validar el JSON con una herramienta básica como `jq` (si está disponible)
          # Esto puede dar una pista más clara si no es JSON.
          jq . pagespeed_report.json || echo "El contenido no es un JSON válido."
        # Ejecutar este paso incluso si el anterior falló, para ver qué pasó
        if: always()

      # --- Paso 3: Enviar el Reporte a Gemini para Análisis (Ejecuta el Script Python) ---
      - name: Send PSI Report to Gemini for Analysis
        id: gemini_analysis
        run: |
          pip install -q -U google-generativeai
          python scripts/gemini_analysis.py pagespeed_report.json gemini_analysis.md
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # Este paso solo se ejecuta si los pasos anteriores fueron exitosos
        if: success()

      # --- Paso 4: Publicar los Resultados de Gemini (ej. en un comentario de PR) ---
      - name: Comment on Pull Request with Gemini Suggestions
        if: github.event_name == 'pull_request' && success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: 'performance-review'
          message: |
            ## 🚀 Revisión de Rendimiento por Gemini (Powered by PageSpeed Insights)

            Aquí tienes las sugerencias de mejora de rendimiento para este despliegue, generadas por Gemini (modelo 1.5 Flash) a partir del análisis de PageSpeed Insights para ${{ env.SITE_URL }}:

            ```markdown
            # Contenido del archivo gemini_analysis.md
            ${{ steps.gemini_analysis.outputs.gemini_suggestions }}
            ```

           ---
            *Este comentario es generado automáticamente.*
