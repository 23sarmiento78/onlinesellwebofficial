name: 🚀 Análisis Avanzado de Performance y SEO con IA

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  schedule:
    # Análisis diario a las 6:00 AM (Argentina UTC-3)
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      analysis_depth:
        description: 'Profundidad del análisis'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - basic
          - comprehensive
          - expert
      pages_to_analyze:
        description: 'Páginas a analizar (separadas por coma)'
        required: false
        default: 'home,blog,planes,contacto'
        type: string
      generate_report:
        description: 'Generar reporte detallado'
        required: false
        default: true
        type: boolean

env:
  SITE_URL: https://hgaruna.org
  ANALYSIS_DEPTH: ${{ github.event.inputs.analysis_depth || 'comprehensive' }}
  PAGES_INPUT: ${{ github.event.inputs.pages_to_analyze || 'home,blog,planes,contacto' }}
  GENERATE_REPORT: ${{ github.event.inputs.generate_report || 'true' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  performance-analysis:
    name: 📊 Análisis de Performance Multi-Página
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    outputs:
      overall-score: ${{ steps.aggregate-results.outputs.overall-score }}
      critical-issues: ${{ steps.aggregate-results.outputs.critical-issues }}
      recommendations: ${{ steps.aggregate-results.outputs.recommendations }}
      
    strategy:
      matrix:
        device: [mobile, desktop]
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🧠 Setup Node.js con Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🐍 Setup Python para Gemini
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Instalación de Dependencias
        run: |
          npm ci --prefer-offline --no-audit
          pip install -q -U google-generativeai requests beautifulsoup4 selenium

      - name: 🎯 Configuración de URLs de Análisis
        id: setup-urls
        run: |
          echo "🎯 Configurando URLs para análisis..."
          
          # Mapear páginas a URLs completas
          PAGES="${{ env.PAGES_INPUT }}"
          URLS=""
          
          IFS=',' read -ra PAGE_ARRAY <<< "$PAGES"
          for page in "${PAGE_ARRAY[@]}"; do
            case $page in
              "home")
                URLS="$URLS,${{ env.SITE_URL }}/"
                ;;
              "blog")
                URLS="$URLS,${{ env.SITE_URL }}/blog"
                ;;
              "planes")
                URLS="$URLS,${{ env.SITE_URL }}/planes"
                ;;
              "contacto")
                URLS="$URLS,${{ env.SITE_URL }}/contacto"
                ;;
              "desarrollo-web")
                URLS="$URLS,${{ env.SITE_URL }}/desarrollo-web-villa-carlos-paz"
                ;;
              "diseño-web")
                URLS="$URLS,${{ env.SITE_URL }}/diseño-web-villa-carlos-paz"
                ;;
              "marketing-digital")
                URLS="$URLS,${{ env.SITE_URL }}/marketing-digital-villa-carlos-paz"
                ;;
              *)
                URLS="$URLS,${{ env.SITE_URL }}/$page"
                ;;
            esac
          done
          
          # Remover coma inicial
          URLS=${URLS#,}
          echo "urls=$URLS" >> $GITHUB_OUTPUT
          echo "📊 URLs configuradas: $URLS"

      - name: 🔍 Análisis PageSpeed Insights Avanzado
        id: psi-analysis
        env:
          GOOGLE_PSI_API_KEY: ${{ secrets.GOOGLE_PSI_API_KEY }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          echo "🔍 Ejecutando análisis PageSpeed Insights para ${{ matrix.device }}..."
          
          mkdir -p reports/psi/${{ matrix.device }}
          
          # Obtener URLs
          URLS="${{ steps.setup-urls.outputs.urls }}"
          IFS=',' read -ra URL_ARRAY <<< "$URLS"
          
          TOTAL_SCORE=0
          URL_COUNT=0
          
          for url in "${URL_ARRAY[@]}"; do
            echo "📊 Analizando: $url"
            
            # Ejecutar análisis PSI
            PSI_URL="https://www.googleapis.com/pagespeedonline/v5/runPagespeed"
            PSI_URL+="?url=$url"
            PSI_URL+="&key=${GOOGLE_PSI_API_KEY:-${API_KEY}}"
            PSI_URL+="&strategy=${{ matrix.device }}"
            PSI_URL+="&locale=es"
            PSI_URL+="&category=performance&category=accessibility&category=best-practices&category=seo"
            
            # Generar nombre de archivo seguro
            FILENAME=$(echo "$url" | sed 's|https\?://||g' | sed 's|[^a-zA-Z0-9]|-|g')
            OUTPUT_FILE="reports/psi/${{ matrix.device }}/${FILENAME}.json"
            
            # Ejecutar análisis con retry
            for i in {1..3}; do
              if curl -s --fail "$PSI_URL" > "$OUTPUT_FILE"; then
                # Verificar que el archivo tiene contenido válido
                if jq -e '.lighthouseResult.categories.performance.score' "$OUTPUT_FILE" > /dev/null 2>&1; then
                  SCORE=$(jq -r '.lighthouseResult.categories.performance.score' "$OUTPUT_FILE")
                  SCORE_PERCENT=$(echo "$SCORE * 100" | bc -l | cut -d. -f1)
                  echo "✅ $url: $SCORE_PERCENT%"
                  TOTAL_SCORE=$((TOTAL_SCORE + SCORE_PERCENT))
                  URL_COUNT=$((URL_COUNT + 1))
                  break
                else
                  echo "⚠️ Respuesta inválida para $url, intento $i"
                  rm -f "$OUTPUT_FILE"
                fi
              else
                echo "⚠️ Error en análisis de $url, intento $i"
              fi
              
              if [ $i -eq 3 ]; then
                echo "❌ Falló análisis de $url después de 3 intentos"
                echo '{"error": "Failed to analyze", "url": "'$url'"}' > "$OUTPUT_FILE"
              else
                sleep $((i * 2))
              fi
            done
          done
          
          # Calcular score promedio
          if [ $URL_COUNT -gt 0 ]; then
            AVERAGE_SCORE=$((TOTAL_SCORE / URL_COUNT))
            echo "average-score=$AVERAGE_SCORE" >> $GITHUB_OUTPUT
            echo "urls-analyzed=$URL_COUNT" >> $GITHUB_OUTPUT
            echo "📊 Score promedio ${{ matrix.device }}: $AVERAGE_SCORE%"
          else
            echo "average-score=0" >> $GITHUB_OUTPUT
            echo "urls-analyzed=0" >> $GITHUB_OUTPUT
            echo "❌ No se pudo analizar ninguna URL"
          fi

      - name: 🧪 Análisis de Core Web Vitals
        id: cwv-analysis
        run: |
          echo "🧪 Analizando Core Web Vitals..."
          
          # Procesar reportes PSI para extraer CWV
          node scripts/advanced-cwv-analyzer.js \
            --input-dir="reports/psi/${{ matrix.device }}" \
            --output="reports/cwv-${{ matrix.device }}.json" \
            --device="${{ matrix.device }}"

      - name: 🎯 Análisis de Oportunidades de Optimización
        id: optimization-analysis
        run: |
          echo "🎯 Identificando oportunidades de optimización..."
          
          # Analizar oportunidades específicas por dispositivo
          node scripts/optimization-opportunities-analyzer.js \
            --input-dir="reports/psi/${{ matrix.device }}" \
            --output="reports/opportunities-${{ matrix.device }}.json" \
            --device="${{ matrix.device }}"

      - name: 📊 Upload Reports Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports-${{ matrix.device }}
          path: reports/
          retention-days: 30

  gemini-ai-analysis:
    name: 🧠 Análisis Inteligente con Gemini
    needs: performance-analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      ai-recommendations: ${{ steps.gemini-analysis.outputs.recommendations }}
      priority-issues: ${{ steps.gemini-analysis.outputs.priority-issues }}
      improvement-plan: ${{ steps.gemini-analysis.outputs.improvement-plan }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python para Gemini
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Instalación de Dependencias Python
        run: |
          pip install -q -U google-generativeai requests beautifulsoup4 pandas matplotlib seaborn

      - name: 📊 Download Performance Reports
        uses: actions/download-artifact@v4
        with:
          pattern: performance-reports-*
          path: reports/
          merge-multiple: true

      - name: 🧠 Análisis Inteligente con Gemini
        id: gemini-analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SITE_URL: ${{ env.SITE_URL }}
          ANALYSIS_DEPTH: ${{ env.ANALYSIS_DEPTH }}
        run: |
          echo "🧠 Ejecutando análisis inteligente con Gemini..."
          
          # Ejecutar análisis avanzado con Gemini
          python scripts/advanced-gemini-performance-analyzer.py \
            --reports-dir="reports/" \
            --site-url="${{ env.SITE_URL }}" \
            --analysis-depth="${{ env.ANALYSIS_DEPTH }}" \
            --output-dir="analysis-results/"

      - name: 📈 Generación de Visualizaciones
        run: |
          echo "📈 Generando visualizaciones..."
          
          # Generar gráficos y visualizaciones
          python scripts/performance-visualizer.py \
            --input-dir="analysis-results/" \
            --output-dir="visualizations/"

      - name: 📄 Generación de Reporte HTML
        if: env.GENERATE_REPORT == 'true'
        run: |
          echo "📄 Generando reporte HTML..."
          
          # Generar reporte interactivo
          python scripts/generate-performance-report.py \
            --analysis-dir="analysis-results/" \
            --visualizations-dir="visualizations/" \
            --output="performance-report.html"

      - name: 📊 Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: gemini-analysis-results
          path: |
            analysis-results/
            visualizations/
            performance-report.html
          retention-days: 30

  aggregate-and-report:
    name: 📋 Agregación y Reporte Final
    needs: [performance-analysis, gemini-ai-analysis]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📊 Download All Results
        uses: actions/download-artifact@v4
        with:
          path: all-results/

      - name: 📋 Agregación de Resultados
        id: aggregate-results
        run: |
          echo "📋 Agregando resultados de análisis..."
          
          # Procesar todos los resultados
          npm install --no-save jq bc
          
          OVERALL_SCORE=0
          DEVICE_COUNT=0
          CRITICAL_ISSUES=""
          
          # Calcular score general
          for device in mobile desktop; do
            if [ -f "all-results/performance-reports-$device/cwv-$device.json" ]; then
              DEVICE_SCORE=$(jq -r '.overall_score // 0' "all-results/performance-reports-$device/cwv-$device.json")
              OVERALL_SCORE=$((OVERALL_SCORE + DEVICE_SCORE))
              DEVICE_COUNT=$((DEVICE_COUNT + 1))
            fi
          done
          
          if [ $DEVICE_COUNT -gt 0 ]; then
            FINAL_SCORE=$((OVERALL_SCORE / DEVICE_COUNT))
          else
            FINAL_SCORE=0
          fi
          
          echo "overall-score=$FINAL_SCORE" >> $GITHUB_OUTPUT
          echo "critical-issues=optimization-needed" >> $GITHUB_OUTPUT
          echo "recommendations=available" >> $GITHUB_OUTPUT
          
          echo "📊 Score general: $FINAL_SCORE%"

      - name: 💬 Comentario en PR (si aplica)
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: 'performance-analysis'
          message: |
            ## 🚀 Análisis de Performance Avanzado
            
            ### 📊 Resultados Generales
            - **Score General**: ${{ steps.aggregate-results.outputs.overall-score }}/100
            - **Análisis**: ${{ env.ANALYSIS_DEPTH }}
            - **Páginas analizadas**: ${{ env.PAGES_INPUT }}
            
            ### 📱 Resultados por Dispositivo
            | Dispositivo | Score Performance | Core Web Vitals |
            |-------------|------------------|-----------------|
            | 📱 Mobile   | Calculando...    | Calculando...   |
            | 🖥️ Desktop  | Calculando...    | Calculando...   |
            
            ### 🎯 Principales Recomendaciones
            - Análisis detallado disponible en artifacts
            - Reporte interactivo generado con IA
            - Oportunidades de optimización identificadas
            
            ### 🔗 Enlaces Útiles
            - [Ver reporte completo](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Descargar visualizaciones](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *Análisis generado automáticamente con Gemini AI • ${{ env.SITE_URL }}*

      - name: 💾 Commit de Resultados (si es push a main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --global user.name 'hgaruna-bot[PERFORMANCE]'
          git config --global user.email 'bot+performance@hgaruna.org'
          
          # Crear directorio de reportes si no existe
          mkdir -p reports/performance/$(date +%Y-%m)
          
          # Copiar resultados importantes
          if [ -f "performance-report.html" ]; then
            cp performance-report.html "reports/performance/$(date +%Y-%m)/report-$(date +%Y%m%d).html"
          fi
          
          # Crear resumen JSON
          cat > "reports/performance/latest.json" << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "overall_score": ${{ steps.aggregate-results.outputs.overall-score }},
            "analysis_depth": "${{ env.ANALYSIS_DEPTH }}",
            "pages_analyzed": "${{ env.PAGES_INPUT }}",
            "commit_sha": "${{ github.sha }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          
          git add reports/performance/
          
          if ! git diff --staged --quiet; then
            git commit -m "📊 Performance analysis update - Score: ${{ steps.aggregate-results.outputs.overall-score }}/100

            🎯 Analysis Details:
            - Depth: ${{ env.ANALYSIS_DEPTH }}
            - Pages: ${{ env.PAGES_INPUT }}
            - Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            - Commit: ${{ github.sha }}
            
            📈 Generated with Gemini AI
            #PerformanceAnalysis #SEO #Optimization"
            
            git push
            echo "✅ Resultados guardados en repositorio"
          else
            echo "📝 No hay cambios para commitear"
          fi

      - name: 📊 Reporte Final en Summary
        run: |
          echo "## 🚀 Reporte de Análisis de Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Métricas Principales" >> $GITHUB_STEP_SUMMARY
          echo "- **Score General**: ${{ steps.aggregate-results.outputs.overall-score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Profundidad de análisis**: ${{ env.ANALYSIS_DEPTH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Páginas analizadas**: ${{ env.PAGES_INPUT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sitio**: ${{ env.SITE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Estado del Análisis" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Analysis**: ${{ needs.performance-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Gemini AI Analysis**: ${{ needs.gemini-ai-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Reporte generado**: ${{ env.GENERATE_REPORT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 Información de Ejecución" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run**: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
          # Estado general
          if [ "${{ steps.aggregate-results.outputs.overall-score }}" -gt 80 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Estado: EXCELENTE" >> $GITHUB_STEP_SUMMARY
            echo "El sitio tiene un rendimiento excelente." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.aggregate-results.outputs.overall-score }}" -gt 60 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Estado: BUENO" >> $GITHUB_STEP_SUMMARY
            echo "El sitio tiene un buen rendimiento con margen de mejora." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Estado: NECESITA MEJORAS" >> $GITHUB_STEP_SUMMARY
            echo "Se requieren optimizaciones para mejorar el rendimiento." >> $GITHUB_STEP_SUMMARY
          fi

  notify-teams:
    name: 📢 Notificaciones
    needs: [performance-analysis, gemini-ai-analysis, aggregate-and-report]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📢 Notificación de Éxito
        if: needs.aggregate-and-report.result == 'success'
        run: |
          echo "✅ Análisis de performance completado exitosamente"
          echo "📊 Score obtenido: ${{ needs.aggregate-and-report.outputs.overall-score }}/100"

      - name: ❌ Notificación de Error
        if: failure()
        run: |
          echo "❌ Error en el análisis de performance"
          echo "🔍 Revisar logs para diagnóstico detallado"
