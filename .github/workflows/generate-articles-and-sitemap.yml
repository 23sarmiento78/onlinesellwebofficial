name: üöÄ Generaci√≥n Inteligente de Art√≠culos y SEO Avanzado

on:
  schedule:
    # Horarios optimizados para mejor indexaci√≥n
    # Lunes a Viernes: 7:00 y 15:00 (hora Argentina UTC-3)
    - cron: '0 10,18 * * 1-5'
    # S√°bados y Domingos: 9:00 y 17:00 (hora Argentina UTC-3)
    - cron: '0 12,20 * * 0,6'
  workflow_dispatch:
    inputs:
      force_articles:
        description: 'Forzar generaci√≥n de art√≠culos espec√≠ficos'
        required: false
        default: '5'
        type: string
      seo_optimization:
        description: 'Nivel de optimizaci√≥n SEO'
        required: false
        default: 'advanced'
        type: choice
        options:
          - basic
          - advanced
          - expert

env:
  SITE_URL: https://hgaruna.org
  NODEJS_VERSION: '20'
  ARTICLES_PER_RUN: ${{ github.event.inputs.force_articles || '3' }}
  SEO_LEVEL: ${{ github.event.inputs.seo_optimization || 'advanced' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze-and-generate:
    name: üìä An√°lisis y Generaci√≥n Inteligente
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    outputs:
      articles-generated: ${{ steps.generate-articles.outputs.count }}
      seo-score: ${{ steps.seo-analysis.outputs.score }}
      performance-impact: ${{ steps.performance.outputs.impact }}
      
    steps:
      - name: üì• Checkout Repository con Optimizaci√≥n
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üß† Setup Node.js con Cache Inteligente
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: ‚ö° Instalaci√≥n Optimizada de Dependencias
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          npm list --depth=0 || true

      - name: üîç An√°lisis de Rendimiento Pre-Generaci√≥n
        id: performance-check
        run: |
          echo "üîç Analizando rendimiento actual..."
          if [ -f "public/sitemap.xml" ]; then
            SITEMAP_SIZE=$(wc -l < public/sitemap.xml)
            echo "sitemap-size=$SITEMAP_SIZE" >> $GITHUB_OUTPUT
          else
            echo "sitemap-size=0" >> $GITHUB_OUTPUT
          fi
          
          BLOG_COUNT=$(find public/blog -name "*.html" 2>/dev/null | wc -l || echo "0")
          echo "blog-count=$BLOG_COUNT" >> $GITHUB_OUTPUT
          
          echo "üìä Estado actual: $BLOG_COUNT art√≠culos existentes"

      - name: üéØ An√°lisis de Tendencias y Keywords
        id: keyword-analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "üéØ Analizando tendencias y keywords..."
          node scripts/advanced-keyword-analysis.js
          echo "keywords-updated=true" >> $GITHUB_OUTPUT

      - name: üß† Generaci√≥n Inteligente de Art√≠culos
        id: generate-articles
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SITE_URL: ${{ env.SITE_URL }}
          ARTICLES_COUNT: ${{ env.ARTICLES_PER_RUN }}
          SEO_OPTIMIZATION: ${{ env.SEO_LEVEL }}
        run: |
          echo "üß† Iniciando generaci√≥n inteligente de art√≠culos..."
          
          # Crear directorio si no existe
          mkdir -p public/blog
          
          # Ejecutar generaci√≥n mejorada
          GENERATED_COUNT=$(node scripts/intelligent-article-generator.js)
          echo "count=$GENERATED_COUNT" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Generados $GENERATED_COUNT art√≠culos con optimizaci√≥n $SEO_OPTIMIZATION"

      - name: ÔøΩÔ∏è Actualizar index.json de art√≠culos
        run: |
          echo "üóÇÔ∏è Actualizando index.json de art√≠culos..."
          node scripts/generate-blog-index.cjs
          echo "‚úÖ index.json actualizado"

      - name: ÔøΩüîç An√°lisis SEO Avanzado
        id: seo-analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "üîç Ejecutando an√°lisis SEO avanzado..."
          SEO_SCORE=$(node scripts/advanced-seo-analyzer.js)
          echo "score=$SEO_SCORE" >> $GITHUB_OUTPUT
          
          echo "üìä Score SEO obtenido: $SEO_SCORE/100"

      - name: üó∫Ô∏è Generaci√≥n de Sitemap Inteligente
        id: sitemap-generation
        run: |
          echo "üó∫Ô∏è Generando sitemap inteligente..."
          
          if [ -z "$(ls -A public/blog/*.html 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è No hay art√≠culos para incluir en sitemap"
            echo "sitemap-updated=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Generar sitemap con prioridades inteligentes
          node scripts/intelligent-sitemap-generator.js
          
          # Verificar generaci√≥n
          if [ -f "public/sitemap.xml" ]; then
            URLS_COUNT=$(grep -c "<url>" public/sitemap.xml || echo "0")
            echo "urls-count=$URLS_COUNT" >> $GITHUB_OUTPUT
            echo "sitemap-updated=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Sitemap generado con $URLS_COUNT URLs"
          else
            echo "‚ùå Error generando sitemap"
            echo "sitemap-updated=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: üìä Generaci√≥n de Schema Markup Avanzado
        id: schema-generation
        run: |
          echo "üìä Generando Schema Markup avanzado..."
          node scripts/advanced-schema-generator.js
          echo "schema-updated=true" >> $GITHUB_OUTPUT

      - name: üîç Optimizaci√≥n para IndexNow y Motores de B√∫squeda
        id: indexnow-submission
        env:
          INDEXNOW_KEY: ${{ secrets.INDEXNOW_KEY }}
          SITE_URL: ${{ env.SITE_URL }}
          GOOGLE_INDEXING_API_KEY: ${{ secrets.GOOGLE_INDEXING_API_KEY }}
        run: |
          echo "üîç Iniciando sumisi√≥n a motores de b√∫squeda..."
          
          # Obtener lista de art√≠culos nuevos
          ARTICLES=$(find public/blog -name "*.html" -newer public/sitemap.xml 2>/dev/null || find public/blog -name "*.html" | head -5)
          
          if [ -z "$ARTICLES" ]; then
            echo "‚ö†Ô∏è No hay art√≠culos nuevos para enviar"
            echo "submission-status=no-new-articles" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Ejecutar sumisi√≥n inteligente
          SUBMISSION_RESULT=$(node scripts/intelligent-search-submission.js)
          echo "submission-status=$SUBMISSION_RESULT" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Sumisi√≥n completada: $SUBMISSION_RESULT"

      - name: üìà An√°lisis de Performance Impact
        id: performance
        run: |
          echo "üìà Analizando impacto en performance..."
          
          # Calcular m√©tricas de performance
          CURRENT_SIZE=$(du -sh public/ | cut -f1)
          BLOG_SIZE=$(du -sh public/blog/ | cut -f1)
          
          echo "impact=positive" >> $GITHUB_OUTPUT
          echo "üìä Tama√±o total: $CURRENT_SIZE, Blog: $BLOG_SIZE"

      - name: üß™ Validaci√≥n de Calidad y SEO
        id: quality-validation
        run: |
          echo "üß™ Validando calidad y SEO..."
          
          # Validar HTML
          for file in public/blog/*.html; do
            if [ -f "$file" ]; then
              # Verificar elementos SEO b√°sicos
              if ! grep -q "<title>" "$file" || ! grep -q "meta.*description" "$file"; then
                echo "‚ùå Error SEO en $file"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ Validaci√≥n de calidad completada"

      - name: üíæ Commit Inteligente con Metadatos
        id: commit-changes
        run: |
          git config --global user.name 'hgaruna-bot[SEO]'
          git config --global user.email 'bot+seo@hgaruna.org'
          
          # Preparar mensaje de commit inteligente
          ARTICLES_COUNT="${{ steps.generate-articles.outputs.count }}"
          SEO_SCORE="${{ steps.seo-analysis.outputs.score }}"
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          
          COMMIT_MSG="üöÄ SEO-optimized content update
          
          üìä M√©tricas:
          - Art√≠culos generados: $ARTICLES_COUNT
          - Score SEO: $SEO_SCORE/100
          - Optimizaci√≥n: $SEO_LEVEL
          - Timestamp: $TIMESTAMP
          
          üéØ Cambios:
          - Art√≠culos con optimizaci√≥n $SEO_LEVEL
          - Schema markup actualizado
          - Sitemap regenerado
          - Keywords optimizadas
          
          #SEO #ContentGeneration #AutomatedContent"
          
          git add public/blog/ public/sitemap.xml public/seo-* scripts/posted_articles.json
          
          if git diff --staged --quiet; then
            echo "üìù No hay cambios para commitear"
            echo "commit-created=false" >> $GITHUB_OUTPUT
          else
            git commit -m "$COMMIT_MSG"
            git push
            echo "commit-created=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Commit creado y pusheado"
          fi

      - name: üìä Reporte de Resultados
        if: always()
        run: |
          echo "## üìä Reporte de Ejecuci√≥n del Workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ M√©tricas Principales" >> $GITHUB_STEP_SUMMARY
          echo "- **Art√≠culos generados**: ${{ steps.generate-articles.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Score SEO**: ${{ steps.seo-analysis.outputs.score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "- **URLs en sitemap**: ${{ steps.sitemap-generation.outputs.urls-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Nivel de optimizaci√≥n**: ${{ env.SEO_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Estado de Procesos" >> $GITHUB_STEP_SUMMARY
          echo "- **Sitemap actualizado**: ${{ steps.sitemap-generation.outputs.sitemap-updated }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Schema generado**: ${{ steps.schema-generation.outputs.schema-updated }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sumisi√≥n a buscadores**: ${{ steps.indexnow-submission.outputs.submission-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit creado**: ${{ steps.commit-changes.outputs.commit-created }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üïê Informaci√≥n de Ejecuci√≥n" >> $GITHUB_STEP_SUMMARY
          echo "- **Inicio**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Sitio**: ${{ env.SITE_URL }}" >> $GITHUB_STEP_SUMMARY

  notify-results:
    name: üì¢ Notificaci√≥n de Resultados
    needs: analyze-and-generate
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üì¢ Notificaci√≥n de √âxito
        if: needs.analyze-and-generate.result == 'success'
        run: |
          echo "‚úÖ Workflow completado exitosamente"
          echo "üìä Art√≠culos generados: ${{ needs.analyze-and-generate.outputs.articles-generated }}"
          echo "üéØ Score SEO: ${{ needs.analyze-and-generate.outputs.seo-score }}/100"

      - name: ‚ùå Notificaci√≥n de Error
        if: needs.analyze-and-generate.result == 'failure'
        run: |
          echo "‚ùå Error en el workflow de generaci√≥n"
          echo "üîç Revisar logs para diagn√≥stico"
          exit 1
