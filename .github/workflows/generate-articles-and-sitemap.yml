name: Generar artículos educativos con AdSense y sitemap

on:
  schedule:
    # 9:00, 13:00 y 19:00 UTC (6:00, 10:00 y 16:00 ART)
    - cron: '0 9 * * *'   # 6:00 ART
    - cron: '0 13 * * *'  # 10:00 ART
    - cron: '0 19 * * *'  # 16:00 ART
  workflow_dispatch:

jobs:
  generar-articulos-educativos-adsense:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Instalar dependencias
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Asegurar directorios requeridos
        run: |
          mkdir -p public/blog
          mkdir -p public/data

      - name: Marcar inicio de generación
        run: |
          rm -f .gen_start || true
          date -u +%Y-%m-%dT%H:%M:%SZ > .gen_start

      - name: Verificar scripts necesarios
        run: |
          missing=0
          for f in \
            scripts/generate-educational-articles-adsense.js \
            scripts/generate-programming-tutorials.js \
            scripts/optimize-articles-adsense.js \
            scripts/add-category-meta.js \
            scripts/build-blog-index.js \
            scripts/validate-adsense-compliance.mjs \
            scripts/update-sitemap.js \
            scripts/publish-to-socials-modern.js; do
            if [ ! -f "$f" ]; then echo "❌ Falta $f"; missing=1; fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "Algunos scripts faltan. Revisa el repositorio."; exit 1
          fi

      - name: Verificar secret GEMINI_API_KEY si se van a generar artículos
        env:
          EDU_COUNT: ${{ vars.EDU_COUNT }}
          TUTORIAL_COUNT: ${{ vars.TUTORIAL_COUNT }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          REQ_EDU=${EDU_COUNT:-3}
          REQ_TUT=${TUTORIAL_COUNT:-2}
          TOTAL_REQ=$((REQ_EDU + REQ_TUT))
          if [ "$TOTAL_REQ" -gt 0 ] && [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ Se solicitaron $TOTAL_REQ artículos pero falta el secret GEMINI_API_KEY"; exit 1
          fi

      - name: Generar artículos educativos optimizados para AdSense
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          EDU_COUNT: ${{ vars.EDU_COUNT }}
        run: |
          COUNT=${EDU_COUNT:-3}
          timeout 900 node scripts/generate-educational-articles-adsense.js --count=$COUNT

      - name: Generar artículos de programación para principiantes
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          TUTORIAL_COUNT: ${{ vars.TUTORIAL_COUNT }}
        run: |
          COUNT=${TUTORIAL_COUNT:-2}
          timeout 900 node scripts/generate-programming-tutorials.js --count=$COUNT

      - name: Optimizar artículos para SEO y AdSense
        run: timeout 600 node scripts/optimize-articles-adsense.js

      - name: Agregar meta categoría y schema markup
        run: timeout 300 node scripts/add-category-meta.js

      - name: Publicar artículos generados en public/blog
        run: timeout 180 node scripts/publish-generated-articles.js

      - name: Generar índice de artículos (JSON)
        run: timeout 300 node scripts/build-blog-index.js

      - name: Verificar artículos generados en public/blog
        env:
          EDU_COUNT: ${{ vars.EDU_COUNT }}
          TUTORIAL_COUNT: ${{ vars.TUTORIAL_COUNT }}
        run: |
          REQ_EDU=${EDU_COUNT:-3}
          REQ_TUT=${TUTORIAL_COUNT:-2}
          TOTAL_REQ=$((REQ_EDU + REQ_TUT))
          echo "Solicitados: $TOTAL_REQ (Edu=$REQ_EDU, Tut=$REQ_TUT)"
          echo "Archivos nuevos desde el marcador:" 
          # Listar y contar HTMLs nuevos desde .gen_start
          NEW_FILES=$(find public/blog -type f -name '*.html' -newer .gen_start | sort || true)
          echo "$NEW_FILES"
          NEW_COUNT=$(echo "$NEW_FILES" | sed '/^$/d' | wc -l | tr -d ' ')
          echo "Nuevos: $NEW_COUNT"
          if [ "$TOTAL_REQ" -gt 0 ] && [ "$NEW_COUNT" -eq 0 ]; then
            echo "❌ No se generaron nuevos artículos HTML en public/blog."
            exit 1
          fi

      - name: Validar compliance AdSense
        run: timeout 600 node scripts/validate-adsense-compliance.mjs --verbose

      - name: Publicar en Redes Sociales
        env:
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          REDDIT_REFRESH_TOKEN: ${{ secrets.REDDIT_REFRESH_TOKEN }}
          REDDIT_SUBREDDIT: 'r/learnprogramming'
        run: timeout 300 node scripts/publish-to-socials-modern.js
        continue-on-error: true

      - name: Actualizar sitemap
        env:
          SITE_URL: ${{ secrets.SITE_URL }}
        run: timeout 120 node scripts/update-sitemap.js

      - name: Commit y push de contenido educativo y sitemap
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add public/blog public/data public/sitemap.xml
          git commit -m "[bot] Contenido educativo con AdSense actualizado - $(date '+%Y-%m-%d %H:%M:%S') ART" || echo "Nada para commitear"
          git push || echo "Nada para pushear"
