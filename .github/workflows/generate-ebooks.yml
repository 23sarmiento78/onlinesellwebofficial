name: 📚 Sistema Avanzado de Generación de Ebooks

on:
  schedule:
    # Generación semanal optimizada los domingos a las 8:00 AM (Argentina UTC-3)
    - cron: '0 11 * * 0'
  workflow_dispatch:
    inputs:
      ebook_types:
        description: 'Tipos de ebooks a generar'
        required: false
        default: 'all'
        type: choice
        options:
          - basic
          - advanced
          - styled
          - all
      quality_level:
        description: 'Nivel de calidad'
        required: false
        default: 'premium'
        type: choice
        options:
          - standard
          - premium
          - enterprise
      generate_pdfs:
        description: 'Generar versiones PDF'
        required: false
        default: true
        type: boolean

env:
  SITE_URL: https://hgaruna.org
  NODEJS_VERSION: '20'
  EBOOK_TYPES: ${{ github.event.inputs.ebook_types || 'all' }}
  QUALITY_LEVEL: ${{ github.event.inputs.quality_level || 'premium' }}
  GENERATE_PDFS: ${{ github.event.inputs.generate_pdfs || 'true' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze-content:
    name: 📊 Análisis de Contenido
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      articles-available: ${{ steps.content-analysis.outputs.articles-count }}
      categories-found: ${{ steps.content-analysis.outputs.categories }}
      content-quality: ${{ steps.content-analysis.outputs.quality-score }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🧠 Setup Node.js con Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'npm'

      - name: ⚡ Instalación de Dependencias
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          npm install puppeteer-core chromium --save-dev

      - name: 📊 Análisis Profundo de Contenido
        id: content-analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "📊 Analizando contenido disponible..."
          
          # Ejecutar análisis inteligente
          ANALYSIS_RESULT=$(node scripts/advanced-content-analyzer.js)
          
          # Extraer métricas
          ARTICLES_COUNT=$(echo "$ANALYSIS_RESULT" | grep "articles_count:" | cut -d':' -f2)
          CATEGORIES=$(echo "$ANALYSIS_RESULT" | grep "categories:" | cut -d':' -f2)
          QUALITY_SCORE=$(echo "$ANALYSIS_RESULT" | grep "quality_score:" | cut -d':' -f2)
          
          echo "articles-count=${ARTICLES_COUNT:-0}" >> $GITHUB_OUTPUT
          echo "categories=${CATEGORIES:-unknown}" >> $GITHUB_OUTPUT
          echo "quality-score=${QUALITY_SCORE:-0}" >> $GITHUB_OUTPUT
          
          echo "📊 Análisis completado: $ARTICLES_COUNT artículos, Score: $QUALITY_SCORE"

  generate-ebooks:
    name: 📚 Generación de Ebooks
    needs: analyze-content
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        type: [basic, advanced, styled]
        
    outputs:
      ebooks-generated: ${{ steps.generate.outputs.count }}
      file-sizes: ${{ steps.generate.outputs.sizes }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧠 Setup Node.js con Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'npm'

      - name: 📦 Instalación de Dependencias Avanzadas
        run: |
          npm ci --prefer-offline
          
          # Instalar dependencias para PDF
          if [ "${{ env.GENERATE_PDFS }}" = "true" ]; then
            npm install puppeteer-core
            apt-get update && apt-get install -y chromium-browser
          fi

      - name: 🎨 Setup de Plantillas y Estilos
        run: |
          echo "🎨 Configurando plantillas..."
          
          # Crear directorio de plantillas si no existe
          mkdir -p templates/ebooks
          
          # Copiar plantillas base
          node scripts/setup-ebook-templates.js --type=${{ matrix.type }} --quality=${{ env.QUALITY_LEVEL }}

      - name: 📚 Generación de Ebooks por Tipo
        id: generate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SITE_URL: ${{ env.SITE_URL }}
          EBOOK_TYPE: ${{ matrix.type }}
          QUALITY_LEVEL: ${{ env.QUALITY_LEVEL }}
          ARTICLES_AVAILABLE: ${{ needs.analyze-content.outputs.articles-available }}
        run: |
          echo "📚 Generando ebooks tipo: ${{ matrix.type }}"
          
          # Generar ebook con configuración específica
          GENERATION_RESULT=$(node scripts/intelligent-ebook-generator.js \
            --type=${{ matrix.type }} \
            --quality=${{ env.QUALITY_LEVEL }} \
            --articles=${{ needs.analyze-content.outputs.articles-available }})
          
          # Extraer resultados
          EBOOKS_COUNT=$(echo "$GENERATION_RESULT" | grep "ebooks_generated:" | cut -d':' -f2)
          FILE_SIZES=$(echo "$GENERATION_RESULT" | grep "file_sizes:" | cut -d':' -f2)
          
          echo "count=${EBOOKS_COUNT:-0}" >> $GITHUB_OUTPUT
          echo "sizes=${FILE_SIZES:-unknown}" >> $GITHUB_OUTPUT
          
          echo "✅ Generados $EBOOKS_COUNT ebooks tipo ${{ matrix.type }}"

      - name: 🔍 Validación de Calidad
        run: |
          echo "🔍 Validando calidad de ebooks generados..."
          
          # Verificar que los archivos existen y tienen contenido
          for file in ebooks/*.html; do
            if [ -f "$file" ]; then
              FILE_SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
              if [ "$FILE_SIZE" -lt 1000 ]; then
                echo "❌ Error: $file es demasiado pequeño ($FILE_SIZE bytes)"
                exit 1
              fi
              echo "✅ $file: $FILE_SIZE bytes"
            fi
          done

      - name: 📄 Generación de PDFs (Opcional)
        if: env.GENERATE_PDFS == 'true'
        run: |
          echo "📄 Generando versiones PDF..."
          
          # Generar PDFs con alta calidad
          node scripts/advanced-pdf-generator.js \
            --input-dir=ebooks \
            --output-dir=ebooks/pdf \
            --quality=${{ env.QUALITY_LEVEL }}

      - name: 📊 Análisis de Métricas
        id: metrics
        run: |
          echo "📊 Calculando métricas..."
          
          # Calcular estadísticas
          HTML_COUNT=$(find ebooks -name "*.html" | wc -l)
          PDF_COUNT=$(find ebooks -name "*.pdf" 2>/dev/null | wc -l || echo "0")
          TOTAL_SIZE=$(du -sh ebooks/ | cut -f1)
          
          echo "html-count=$HTML_COUNT" >> $GITHUB_OUTPUT
          echo "pdf-count=$PDF_COUNT" >> $GITHUB_OUTPUT
          echo "total-size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          
          echo "📊 Métricas: $HTML_COUNT HTML, $PDF_COUNT PDF, Tamaño: $TOTAL_SIZE"

      - name: 💾 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ebooks-${{ matrix.type }}-${{ env.QUALITY_LEVEL }}
          path: ebooks/
          retention-days: 30

  combine-and-optimize:
    name: 🎯 Combinación y Optimización
    needs: [analyze-content, generate-ebooks]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'npm'

      - name: 📦 Instalación de Dependencias
        run: npm ci --prefer-offline

      - name: 📚 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp-ebooks/

      - name: 🎯 Combinación Inteligente de Ebooks
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          QUALITY_LEVEL: ${{ env.QUALITY_LEVEL }}
        run: |
          echo "🎯 Combinando ebooks de forma inteligente..."
          
          # Mover archivos descargados
          mkdir -p ebooks
          cp -r temp-ebooks/*/* ebooks/ 2>/dev/null || true
          
          # Ejecutar combinación avanzada
          node scripts/intelligent-ebook-combiner.js \
            --quality=${{ env.QUALITY_LEVEL }} \
            --articles-available=${{ needs.analyze-content.outputs.articles-available }}

      - name: 📊 Optimización de Ebooks
        run: |
          echo "📊 Optimizando ebooks..."
          
          # Optimizar HTML
          node scripts/ebook-optimizer.js --type=html
          
          # Optimizar imágenes si existen
          if [ -d "ebooks/images" ]; then
            node scripts/ebook-optimizer.js --type=images
          fi

      - name: 🔍 Generación de Índice y Metadatos
        run: |
          echo "🔍 Generando índice y metadatos..."
          
          # Generar índice maestro
          node scripts/generate-ebook-index.js
          
          # Generar metadatos
          node scripts/generate-ebook-metadata.js

      - name: 💾 Commit Final
        run: |
          git config --global user.name 'hgaruna-bot[EBOOKS]'
          git config --global user.email 'bot+ebooks@hgaruna.org'
          
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          EBOOK_COUNT=$(find ebooks -name "*.html" | wc -l)
          PDF_COUNT=$(find ebooks -name "*.pdf" 2>/dev/null | wc -l || echo "0")
          
          COMMIT_MSG="📚 Actualización semanal de ebooks optimizados
          
          📊 Estadísticas:
          - Ebooks HTML: $EBOOK_COUNT
          - Ebooks PDF: $PDF_COUNT
          - Calidad: ${{ env.QUALITY_LEVEL }}
          - Artículos procesados: ${{ needs.analyze-content.outputs.articles-available }}
          - Score de contenido: ${{ needs.analyze-content.outputs.content-quality }}/100
          
          🎯 Características:
          - Generación inteligente con Gemini
          - Optimización automática de contenido
          - Índice maestro actualizado
          - Metadatos enriquecidos
          - Plantillas responsivas
          
          ⏰ Generado: $TIMESTAMP
          
          #Ebooks #ContentGeneration #AutomatedPublishing"
          
          git add ebooks/
          
          if git diff --staged --quiet; then
            echo "📝 No hay cambios para commitear"
          else
            git commit -m "$COMMIT_MSG"
            git push
            echo "✅ Ebooks actualizados y pusheados"
          fi

      - name: 📊 Reporte Final
        run: |
          echo "## 📚 Reporte de Generación de Ebooks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Métricas de Generación" >> $GITHUB_STEP_SUMMARY
          echo "- **Artículos disponibles**: ${{ needs.analyze-content.outputs.articles-available }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Categorías encontradas**: ${{ needs.analyze-content.outputs.categories }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Score de calidad**: ${{ needs.analyze-content.outputs.content-quality }}/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Nivel de calidad**: ${{ env.QUALITY_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Archivos Generados" >> $GITHUB_STEP_SUMMARY
          EBOOK_COUNT=$(find ebooks -name "*.html" | wc -l)
          PDF_COUNT=$(find ebooks -name "*.pdf" 2>/dev/null | wc -l || echo "0")
          TOTAL_SIZE=$(du -sh ebooks/ 2>/dev/null | cut -f1 || echo "N/A")
          echo "- **Ebooks HTML**: $EBOOK_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Ebooks PDF**: $PDF_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Tamaño total**: $TOTAL_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Estado del Proceso" >> $GITHUB_STEP_SUMMARY
          echo "- **Tipos generados**: ${{ env.EBOOK_TYPES }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PDFs habilitados**: ${{ env.GENERATE_PDFS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Optimización aplicada**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: 🧹 Limpieza
    needs: [analyze-content, generate-ebooks, combine-and-optimize]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 🧹 Cleanup Temporal Files
        run: |
          echo "🧹 Limpiando archivos temporales..."
          # La limpieza se maneja automáticamente por GitHub Actions
          echo "✅ Limpieza completada"

      - name: 📊 Reporte de Estado Final
        if: always()
        run: |
          echo "📊 Estado final del workflow:"
          echo "- Análisis: ${{ needs.analyze-content.result }}"
          echo "- Generación: ${{ needs.generate-ebooks.result }}"
          echo "- Combinación: ${{ needs.combine-and-optimize.result }}"
          
          if [ "${{ needs.combine-and-optimize.result }}" = "success" ]; then
            echo "✅ Workflow completado exitosamente"
          else
            echo "❌ Workflow completado con errores"
          fi
