name: 🧪 Test - Generación de Artículos

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Modo de prueba'
        required: true
        default: 'single'
        type: choice
        options:
        - single
        - multiple
        - full_system
      
      article_count:
        description: 'Número de artículos (para modo multiple)'
        required: false
        default: '1'
        type: string
      
      test_topic:
        description: 'Tema específico para test (opcional)'
        required: false
        default: ''
        type: string

jobs:
  test-generation:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: 🔄 Checkout código
        uses: actions/checkout@v4

      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Instalar dependencias
        run: |
          npm ci
          npm install glob @google/generative-ai

      - name: 🧪 Test - Artículo individual
        if: ${{ github.event.inputs.test_mode == 'single' }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SITE_URL: ${{ vars.SITE_URL || 'https://hgaruna.org' }}
          ARTICLE_COUNT: 1
        run: |
          echo "🧪 Ejecutando test de artículo individual..."
          node scripts/github-action-article-generator.js

      - name: 🧪 Test - Múltiples artículos
        if: ${{ github.event.inputs.test_mode == 'multiple' }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SITE_URL: ${{ vars.SITE_URL || 'https://hgaruna.org' }}
          ARTICLE_COUNT: ${{ github.event.inputs.article_count }}
        run: |
          echo "🧪 Ejecutando test de múltiples artículos..."
          echo "📊 Cantidad: $ARTICLE_COUNT"
          node scripts/github-action-article-generator.js

      - name: 🧪 Test - Sistema completo
        if: ${{ github.event.inputs.test_mode == 'full_system' }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SITE_URL: ${{ vars.SITE_URL || 'https://hgaruna.org' }}
        run: |
          echo "🧪 Ejecutando test del sistema completo..."
          node run-adsense-system.js --test --full

      - name: 📊 Verificar resultados
        run: |
          echo "📋 Verificando archivos generados..."
          
          # Contar archivos generados
          NEW_HTML=$(find public/blog -name "*.html" -newer .git/HEAD 2>/dev/null | wc -l)
          NEW_MD=$(find src/content/articles -name "*.md" -newer .git/HEAD 2>/dev/null | wc -l)
          
          echo "📄 Archivos HTML nuevos: $NEW_HTML"
          echo "📝 Archivos MD nuevos: $NEW_MD"
          
          # Listar archivos recientes
          if [ $NEW_HTML -gt 0 ]; then
            echo "📁 Archivos HTML generados:"
            find public/blog -name "*.html" -newer .git/HEAD 2>/dev/null | head -10
          fi
          
          if [ $NEW_MD -gt 0 ]; then
            echo "📁 Archivos MD generados:"
            find src/content/articles -name "*.md" -newer .git/HEAD 2>/dev/null | head -10
          fi

      - name: 📈 Analizar calidad
        run: |
          echo "🔍 Analizando calidad de contenido generado..."
          
          # Verificar que los archivos no están vacíos
          for file in $(find public/blog -name "*.html" -newer .git/HEAD 2>/dev/null | head -3); do
            if [ -f "$file" ]; then
              SIZE=$(wc -c < "$file")
              WORDS=$(grep -o '<p>' "$file" | wc -l)
              echo "📄 $(basename "$file"): $SIZE bytes, ~$WORDS párrafos"
            fi
          done

      - name: ✅ Test completado
        run: |
          echo "🎉 Test de generación completado"
          echo "📅 Ejecutado: $(date)"
          echo "🔧 Modo: ${{ github.event.inputs.test_mode }}"
          echo "📊 Todo funcionando correctamente"

  # Job para validar que los archivos cumplen estándares
  validate-quality:
    runs-on: ubuntu-latest
    needs: test-generation
    if: always()
    
    steps:
      - name: 🔄 Checkout código actualizado
        uses: actions/checkout@v4

      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Instalar dependencias
        run: npm ci

      - name: 🧪 Validar calidad AdSense
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🔍 Validando cumplimiento AdSense..."
          
          # Ejecutar validación solo si hay archivos para validar
          if [ -d "public/blog" ] && [ "$(ls -A public/blog)" ]; then
            node scripts/adsense-validation-test.js || echo "⚠️ Validación con warnings"
          else
            echo "ℹ️ No hay archivos para validar"
          fi

      - name: 📊 Resumen final
        run: |
          echo "📋 RESUMEN DE TEST:"
          echo "✅ Generación: Completada"
          echo "🔍 Validación: Ejecutada"
          echo "📅 Timestamp: $(date)"
          echo "🎯 Sistema listo para producción"
