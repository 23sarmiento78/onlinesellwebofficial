name: 🤖 Generación Automática de Artículos

on:
  # Ejecutar todos los días a las 16:00 Argentina (19:00 UTC)
  schedule:
    - cron: '0 19 * * *'
  
  # Permitir ejecución manual
  workflow_dispatch:
    inputs:
      article_count:
        description: 'Número de artículos a generar'
        required: false
        default: '3'
        type: string

jobs:
  generate-articles:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 🔄 Checkout código
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📅 Configurar zona horaria Argentina
        run: |
          sudo timedatectl set-timezone America/Argentina/Buenos_Aires
          echo "Hora actual en Argentina: $(date)"

      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Instalar dependencias
        run: |
          # Limpiar cache y node_modules si existe
          rm -rf node_modules package-lock.json || true
          
          # Instalar dependencias
          npm install
          
          # Instalar dependencias específicas si no están
          npm install glob @google/generative-ai

      - name: 🧪 Verificar configuración
        run: |
          echo "🔧 Verificando configuración del sistema..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "GEMINI_API_KEY configurada: ${{ secrets.GEMINI_API_KEY != '' }}"
          echo "Directorio actual: $(pwd)"
          ls -la scripts/ || echo "Directorio scripts no encontrado"
          
          # Verificar que las dependencias críticas estén instaladas
          echo "📦 Verificando dependencias críticas..."
          node -e "console.log('✅ @google/generative-ai:', require('@google/generative-ai').version || 'instalado')" || echo "❌ @google/generative-ai no disponible"
          node -e "console.log('✅ glob:', require('glob').version || 'instalado')" || echo "❌ glob no disponible"

      - name: 🚀 Generar artículos automáticamente
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SITE_URL: ${{ vars.SITE_URL || 'https://hgaruna.org' }}
          ARTICLE_COUNT: ${{ github.event.inputs.article_count || '3' }}
        run: |
          echo "🎯 Iniciando generación de $ARTICLE_COUNT artículos..."
          echo "📅 Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"

          # Ejecutar el script de generación automática
          # El script ahora maneja errores de cuota y siempre retorna exit code 0
          node scripts/github-action-article-generator.js

          echo "✅ Generación completada (con manejo de errores mejorado)"

      - name: 📋 Actualizar índice del blog
        run: |
          echo "📋 Actualizando índice del blog..."
          node scripts/auto-regenerate-blog-index.cjs || echo "⚠️ Error actualizando índice, continuando..."
          echo "✅ Índice del blog actualizado"

      - name: 🗺️ Actualizar sitemap
        run: |
          echo "🗺️ Generando sitemap actualizado..."
          node scripts/generate-sitemap.js || echo "⚠️ Error generando sitemap, continuando..."
          echo "✅ Sitemap actualizado"

      - name: 🔍 Verificar integración
        run: |
          echo "🔍 Verificando que todo esté correctamente integrado..."
          node scripts/verify-integration.js || echo "⚠️ Error en verificación, continuando..."
          echo "✅ Integración verificada"

      - name: 📊 Generar resumen
        run: |
          echo "📋 Generando resumen de cambios..."
          
          # Contar archivos nuevos
          NEW_ARTICLES=$(git diff --name-only --diff-filter=A | grep -E "\.(html|md)$" | wc -l)
          MODIFIED_FILES=$(git diff --name-only --diff-filter=M | wc -l)
          
          echo "📝 Artículos nuevos: $NEW_ARTICLES"
          echo "🔧 Archivos modificados: $MODIFIED_FILES"
          
          # Crear resumen para el commit
          cat > commit_summary.txt << EOF
          🤖 Generación automática de artículos - $(date '+%Y-%m-%d')
          
          📊 Resumen:
          - 📝 Artículos nuevos: $NEW_ARTICLES
          - 🔧 Archivos modificados: $MODIFIED_FILES
          - 🕐 Generado: $(date '+%Y-%m-%d %H:%M:%S %Z')
          - 🤖 Proceso: GitHub Actions automático
          
          🎯 Optimizado para Google AdSense
          🔍 SEO local Villa Carlos Paz
          ✨ Contenido generado con IA
          EOF

      - name: 🔍 Verificar cambios
        id: verify_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 Se detectaron cambios en el repositorio"
            git status --short
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No se detectaron cambios"
          fi

      - name: 📤 Commit y push automático
        if: steps.verify_changes.outputs.has_changes == 'true'
        run: |
          # Configurar Git
          git config --local user.email "action@github.com"
          git config --local user.name "hgaruna Bot"
          
          # Añadir todos los cambios
          git add .
          
          # Crear commit con resumen detallado
          git commit -F commit_summary.txt || echo "⚠️ No hay cambios para commitear"
          
          # Push a la rama principal
          git push origin HEAD:main || echo "⚠️ Error en push, pero continuando..."
          
          echo "✅ Cambios enviados exitosamente"

      - name: 📈 Actualizar estadísticas
        if: steps.verify_changes.outputs.has_changes == 'true'
        run: |
          echo "📊 Actualizando estadísticas del sistema..."
          
          # Contar total de artículos
          TOTAL_ARTICLES=$(find public/blog -name "*.html" | wc -l)
          
          # Crear badge de estadísticas
          curl -X POST "https://img.shields.io/badge/Art%C3%ADculos-$TOTAL_ARTICLES-brightgreen" > /dev/null 2>&1 || true
          
          echo "📊 Total de artículos en el sitio: $TOTAL_ARTICLES"

      - name: 🔔 Notificación de éxito
        if: steps.verify_changes.outputs.has_changes == 'true'
        run: |
          echo "🎉 ¡Generación de artículos completada exitosamente!"
          echo "📅 Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🔗 Los cambios están disponibles en el repositorio"

      - name: ⚠️ Notificación de fallo
        if: failure()
        run: |
          echo "❌ Error en la generación de artículos"
          echo "📅 Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🔍 Revisa los logs para más detalles"

      - name: 📋 Crear issue en caso de fallo
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `❌ Fallo en generación automática de artículos - ${new Date().toISOString().split('T')[0]}`,
              body: `
              ## 🚨 Error en Generación Automática
              
              **Fecha:** ${new Date().toLocaleString('es-AR', {timeZone: 'America/Argentina/Buenos_Aires'})}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              ### 🔍 Detalles
              La generación automática de artículos falló. Revisar logs del workflow para más información.
              
              ### 🛠️ Acciones Sugeridas
              - [ ] Verificar configuración de GEMINI_API_KEY
              - [ ] Revisar logs del workflow
              - [ ] Ejecutar manualmente para debug
              - [ ] Verificar dependencias y scripts
              
              **Enlaces útiles:**
              - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [Repository](${context.payload.repository.html_url})
              `,
              labels: ['bug', 'automation', 'github-actions']
            })

  # Job separado para estadísticas diarias
  daily-stats:
    runs-on: ubuntu-latest
    needs: generate-articles
    if: always()
    
    steps:
      - name: 📊 Generar estadísticas diarias
        run: |
          echo "📈 Estadísticas de hoy $(date '+%Y-%m-%d'):"
          echo "🤖 Workflow ejecutado a las $(date '+%H:%M %Z')"
          echo "✅ Sistema de generación automática activo"
