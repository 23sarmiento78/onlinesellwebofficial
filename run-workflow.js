// Script para ejecutar el workflow localmente
import { spawn } from 'child_process';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';

// Cargar variables de entorno
dotenv.config();

// Verificar que la API key est√© configurada
if (!process.env.GEMINI_API_KEY) {
  console.error('‚ùå Error: GEMINI_API_KEY no est√° configurada en el archivo .env');
  process.exit(1);
}

console.log('‚úÖ Variables de entorno cargadas correctamente');
console.log('üîë Longitud de la API Key:', process.env.GEMINI_API_KEY ? 'Configurada' : 'No configurada');

// Ejecutar los pasos del workflow
async function runWorkflow() {
  try {
    console.log('\nüöÄ Iniciando flujo de trabajo...');
    
    // 1. Generar art√≠culos educativos
    console.log('\nüìù Generando art√≠culos educativos...');
    await executeCommand('node', ['scripts/generate-educational-articles-adsense.js', '--count=1']);
    
    // 2. Optimizar art√≠culos
    console.log('\n‚öôÔ∏è Optimizando art√≠culos...');
    await executeCommand('node', ['scripts/optimize-articles-adsense.js']);
    
    console.log('\n‚úÖ Flujo de trabajo completado exitosamente');
  } catch (error) {
    console.error('‚ùå Error en el flujo de trabajo:', error);
    process.exit(1);
  }
}

// Funci√≥n auxiliar para ejecutar comandos
function executeCommand(command, args) {
  return new Promise((resolve, reject) => {
    const cmd = spawn(command, args, { stdio: 'inherit', shell: true });
    
    cmd.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`El comando fall√≥ con el c√≥digo ${code}`));
      }
    });
  });
}

// Ejecutar el flujo de trabajo
runWorkflow();
