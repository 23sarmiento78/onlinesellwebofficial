// Script de prueba para la autenticaci√≥n de LinkedIn
class LinkedInAuthTest {
  constructor() {
    this.config = window.LINKEDIN_CONFIG || {};
    this.clientId = this.config.CLIENT_ID;
    this.redirectUri = this.config.REDIRECT_URI;
    this.scope = this.config.SCOPE;
  }

  // Probar el flujo completo de autenticaci√≥n
  async testFullAuthFlow() {
    console.log('üß™ Iniciando prueba de autenticaci√≥n de LinkedIn...');
    
    try {
      // Paso 1: Verificar configuraci√≥n
      console.log('üìã Verificando configuraci√≥n...');
      this.verifyConfig();
      
      // Paso 2: Generar URL de autorizaci√≥n
      console.log('üîó Generando URL de autorizaci√≥n...');
      const authUrl = this.generateAuthUrl();
      console.log('URL de autorizaci√≥n:', authUrl);
      
      // Paso 3: Simular apertura de ventana
      console.log('ü™ü Simulando apertura de ventana de autenticaci√≥n...');
      const authWindow = window.open(authUrl, 'linkedin_auth_test', 
        'width=600,height=700,scrollbars=yes,resizable=yes');
      
      if (!authWindow) {
        throw new Error('No se pudo abrir la ventana de autenticaci√≥n. Verifica el bloqueador de ventanas emergentes.');
      }
      
      console.log('‚úÖ Ventana de autenticaci√≥n abierta correctamente');
      
      // Paso 4: Escuchar mensajes de la ventana de callback
      return new Promise((resolve, reject) => {
        const messageHandler = (event) => {
          if (event.origin !== window.location.origin) return;
          
          console.log('üì® Mensaje recibido:', event.data);
          
          if (event.data.type === 'linkedin_auth_success') {
            console.log('‚úÖ Autenticaci√≥n exitosa!');
            console.log('Token recibido:', event.data.access_token ? 'S√ç' : 'NO');
            window.removeEventListener('message', messageHandler);
            authWindow.close();
            resolve({
              success: true,
              access_token: event.data.access_token,
              message: 'Autenticaci√≥n completada exitosamente'
            });
          } else if (event.data.type === 'linkedin_auth_error') {
            console.log('‚ùå Error en autenticaci√≥n:', event.data.error);
            window.removeEventListener('message', messageHandler);
            authWindow.close();
            reject(new Error(event.data.error));
          }
        };

        window.addEventListener('message', messageHandler);

        // Verificar si la ventana se cerr√≥ manualmente
        const checkClosed = setInterval(() => {
          if (authWindow.closed) {
            clearInterval(checkClosed);
            window.removeEventListener('message', messageHandler);
            reject(new Error('Autenticaci√≥n cancelada por el usuario'));
          }
        }, 1000);

        // Timeout despu√©s de 5 minutos
        setTimeout(() => {
          clearInterval(checkClosed);
          window.removeEventListener('message', messageHandler);
          authWindow.close();
          reject(new Error('Timeout en autenticaci√≥n'));
        }, 300000);
      });
      
    } catch (error) {
      console.error('‚ùå Error en prueba de autenticaci√≥n:', error);
      throw error;
    }
  }

  // Verificar configuraci√≥n
  verifyConfig() {
    const required = ['CLIENT_ID', 'REDIRECT_URI', 'SCOPE'];
    const missing = required.filter(key => !this.config[key]);
    
    if (missing.length > 0) {
      throw new Error(`Configuraci√≥n faltante: ${missing.join(', ')}`);
    }
    
    console.log('‚úÖ Configuraci√≥n verificada correctamente');
    console.log('Client ID:', this.clientId);
    console.log('Redirect URI:', this.redirectUri);
    console.log('Scope:', this.scope);
  }

  // Generar URL de autorizaci√≥n
  generateAuthUrl() {
    const state = this.generateState();
    const authUrl = `https://www.linkedin.com/oauth/v2/authorization?` +
      `response_type=code&` +
      `client_id=${this.clientId}&` +
      `redirect_uri=${encodeURIComponent(this.redirectUri)}&` +
      `scope=${encodeURIComponent(this.scope)}&` +
      `state=${state}`;
    
    // Guardar el estado para verificaci√≥n
    sessionStorage.setItem('linkedin_auth_state', state);
    
    return authUrl;
  }

  // Generar estado para seguridad OAuth
  generateState() {
    return Math.random().toString(36).substring(2, 15) + 
           Math.random().toString(36).substring(2, 15);
  }

  // Probar validaci√≥n de token
  async testTokenValidation(accessToken) {
    console.log('üîç Probando validaci√≥n de token...');
    
    try {
      const response = await fetch('https://api.linkedin.com/v2/me', {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'X-Restli-Protocol-Version': '2.0.0'
        }
      });

      if (response.ok) {
        const profile = await response.json();
        console.log('‚úÖ Token v√°lido');
        console.log('Perfil:', profile);
        return profile;
      } else {
        throw new Error(`Token inv√°lido: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå Error validando token:', error);
      throw error;
    }
  }
}

// Funci√≥n global para ejecutar la prueba
window.testLinkedInAuth = async function() {
  const tester = new LinkedInAuthTest();
  
  try {
    const result = await tester.testFullAuthFlow();
    console.log('üéâ Prueba completada exitosamente:', result);
    
    // Probar validaci√≥n del token si se recibi√≥
    if (result.access_token) {
      await tester.testTokenValidation(result.access_token);
    }
    
    return result;
  } catch (error) {
    console.error('üí• Prueba fall√≥:', error);
    throw error;
  }
};

// Funci√≥n para probar desde la consola
console.log('üß™ LinkedIn Auth Test cargado. Usa testLinkedInAuth() para probar.'); 