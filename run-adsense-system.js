#!/usr/bin/env node

/**
 * üöÄ EJECUTOR PRINCIPAL DEL SISTEMA ADSENSE
 * 
 * Script principal que ejecuta todo el sistema de generaci√≥n y optimizaci√≥n
 * de contenido para Google AdSense de manera ordenada y autom√°tica.
 * 
 * USO:
 * node run-adsense-system.js [opciones]
 * 
 * OPCIONES:
 * --full          Ejecuta el sistema completo (por defecto)
 * --generate      Solo genera nuevos art√≠culos
 * --improve       Solo mejora art√≠culos existentes
 * --integrate     Solo integra AdSense
 * --validate      Solo ejecuta validaci√≥n
 * --test          Modo de prueba (no modifica archivos)
 */

import { MasterAdSenseContentSystem } from './scripts/master-adsense-content-system.js';
import { EnhancedArticleGenerator } from './scripts/enhanced-article-generator-adsense.js';
import { AdSenseIntegrator } from './scripts/integrate-adsense-all-articles.js';
import { ArticleImprover } from './scripts/improve-existing-articles.js';
import { AdSenseValidator } from './scripts/adsense-validation-test.js';

// === CONFIGURACI√ìN ===
const CONFIG = {
  GEMINI_API_KEY: process.env.GEMINI_API_KEY,
  MODE: process.argv.includes('--test') ? 'test' : 'production',
  EXECUTION_MODE: getExecutionMode(),
  SITE_URL: process.env.SITE_URL || 'https://hgaruna.org'
};

// === DETERMINAR MODO DE EJECUCI√ìN ===
function getExecutionMode() {
  if (process.argv.includes('--generate')) return 'generate';
  if (process.argv.includes('--improve')) return 'improve';
  if (process.argv.includes('--integrate')) return 'integrate';
  if (process.argv.includes('--validate')) return 'validate';
  return 'full'; // Por defecto
}

// === MOSTRAR AYUDA ===
function showHelp() {
  console.log(`
üöÄ SISTEMA MAESTRO ADSENSE - hgaruna Digital
============================================

DESCRIPCI√ìN:
Sistema completo para generar, mejorar y optimizar contenido
para cumplir con las pol√≠ticas de Google AdSense.

USO:
node run-adsense-system.js [opciones]

OPCIONES:
--full          Ejecuta el sistema completo (por defecto)
--generate      Solo genera nuevos art√≠culos
--improve       Solo mejora art√≠culos existentes  
--integrate     Solo integra scripts de AdSense
--validate      Solo ejecuta validaci√≥n final
--test          Modo de prueba (no modifica archivos)
--help          Muestra esta ayuda

EJEMPLOS:
node run-adsense-system.js                    # Sistema completo
node run-adsense-system.js --generate         # Solo generar art√≠culos
node run-adsense-system.js --validate         # Solo validar
node run-adsense-system.js --test --full      # Prueba completa

REQUISITOS:
- GEMINI_API_KEY configurada en variables de entorno
- Node.js 18+
- Conexi√≥n a internet para IA

CONFIGURACI√ìN:
export GEMINI_API_KEY="tu_clave_aqui"
export SITE_URL="https://tu-sitio.com"

üéØ ¬°Sistema listo para crear contenido de calidad para AdSense!
`);
}

// === VALIDAR CONFIGURACI√ìN ===
function validateConfig() {
  console.log('üîç Validando configuraci√≥n...');
  
  const errors = [];
  
  if (!CONFIG.GEMINI_API_KEY) {
    errors.push('GEMINI_API_KEY no est√° configurada');
  }
  
  if (CONFIG.GEMINI_API_KEY === '___PRIVATE_KEY___') {
    errors.push('GEMINI_API_KEY tiene valor placeholder');
  }
  
  if (errors.length > 0) {
    console.error('‚ùå Errores de configuraci√≥n:');
    errors.forEach(error => console.error(`   - ${error}`));
    console.log('\nüí° Para configurar:');
    console.log('   export GEMINI_API_KEY="tu_clave_gemini_aqui"');
    console.log('   export SITE_URL="https://tu-sitio.com"');
    process.exit(1);
  }
  
  console.log('‚úÖ Configuraci√≥n v√°lida');
  console.log(`   ü§ñ Gemini API: Configurada`);
  console.log(`   üåê Sitio: ${CONFIG.SITE_URL}`);
  console.log(`   üîß Modo: ${CONFIG.MODE}`);
  console.log(`   ‚ö° Ejecuci√≥n: ${CONFIG.EXECUTION_MODE}`);
}

// === EJECUTOR PRINCIPAL ===
class AdSenseSystemRunner {
  constructor() {
    this.startTime = Date.now();
    this.results = {};
  }

  async showWelcome() {
    console.log('\n' + '='.repeat(80));
    console.log('üöÄ SISTEMA MAESTRO ADSENSE - HGARUNA DIGITAL');
    console.log('='.repeat(80));
    console.log(`üìÖ Iniciado: ${new Date().toLocaleString('es-ES')}`);
    console.log(`üéØ Modo: ${CONFIG.EXECUTION_MODE.toUpperCase()}`);
    console.log(`üè¢ Sitio: ${CONFIG.SITE_URL}`);
    console.log(`üîß Entorno: ${CONFIG.MODE}`);
    console.log('='.repeat(80));
    
    if (CONFIG.MODE === 'test') {
      console.log('‚ö†Ô∏è MODO PRUEBA: No se modificar√°n archivos');
      console.log('-'.repeat(80));
    }
  }

  async executeFullSystem() {
    console.log('\nüöÄ EJECUTANDO SISTEMA COMPLETO...');
    
    try {
      const masterSystem = new MasterAdSenseContentSystem();
      const report = await masterSystem.execute();
      
      this.results.fullSystem = report;
      return report;
      
    } catch (error) {
      console.error('‚ùå Error en sistema completo:', error.message);
      throw error;
    }
  }

  async executeGenerate() {
    console.log('\n‚ú® GENERANDO NUEVOS ART√çCULOS...');
    
    try {
      const generator = new EnhancedArticleGenerator();
      await generator.initialize();
      
      // Generar art√≠culos de alta calidad
      const topics = [
        { topic: 'Desarrollo Web en Villa Carlos Paz: Gu√≠a 2025', category: 'desarrollo' },
        { topic: 'SEO Local para Negocios en C√≥rdoba', category: 'seo' },
        { topic: 'Marketing Digital para PyMEs Argentinas', category: 'seo' },
        { topic: 'React.js: Desarrollo de Apps Modernas', category: 'desarrollo' },
        { topic: 'Dise√±o UX/UI: Mejores Pr√°cticas 2025', category: 'diseno' }
      ];
      
      const results = await generator.generateMultipleArticles(topics);
      const report = await generator.generateReport();
      
      this.results.generation = report;
      
      console.log(`‚úÖ Generados ${results.length} art√≠culos nuevos`);
      return report;
      
    } catch (error) {
      console.error('‚ùå Error generando art√≠culos:', error.message);
      throw error;
    }
  }

  async executeImprove() {
    console.log('\nüìà MEJORANDO ART√çCULOS EXISTENTES...');
    
    try {
      const improver = new ArticleImprover();
      await improver.initialize();
      
      await improver.processAllArticles();
      const report = improver.generateReport();
      
      this.results.improvement = report;
      
      console.log(`‚úÖ Mejorados ${report.summary.improved} art√≠culos`);
      return report;
      
    } catch (error) {
      console.error('‚ùå Error mejorando art√≠culos:', error.message);
      throw error;
    }
  }

  async executeIntegrate() {
    console.log('\nüí∞ INTEGRANDO ADSENSE...');
    
    try {
      const integrator = new AdSenseIntegrator();
      await integrator.initialize();
      
      await integrator.processAllArticles();
      const report = integrator.generateReport();
      
      this.results.integration = report;
      
      console.log(`‚úÖ AdSense integrado en ${report.summary.processedSuccessfully} archivos`);
      return report;
      
    } catch (error) {
      console.error('‚ùå Error integrando AdSense:', error.message);
      throw error;
    }
  }

  async executeValidate() {
    console.log('\nüß™ VALIDANDO CUMPLIMIENTO ADSENSE...');
    
    try {
      const validator = new AdSenseValidator();
      const report = await validator.execute();
      
      this.results.validation = report;
      
      const score = report.validation_summary.overall_score;
      const ready = report.validation_summary.ready_for_adsense;
      
      console.log(`‚úÖ Validaci√≥n completada: ${score}% - ${ready ? 'LISTO' : 'NECESITA MEJORAS'}`);
      return report;
      
    } catch (error) {
      console.error('‚ùå Error en validaci√≥n:', error.message);
      throw error;
    }
  }

  async execute() {
    try {
      await this.showWelcome();
      
      let finalReport;
      
      switch (CONFIG.EXECUTION_MODE) {
        case 'full':
          finalReport = await this.executeFullSystem();
          break;
          
        case 'generate':
          finalReport = await this.executeGenerate();
          break;
          
        case 'improve':
          finalReport = await this.executeImprove();
          break;
          
        case 'integrate':
          finalReport = await this.executeIntegrate();
          break;
          
        case 'validate':
          finalReport = await this.executeValidate();
          break;
          
        default:
          throw new Error(`Modo de ejecuci√≥n desconocido: ${CONFIG.EXECUTION_MODE}`);
      }
      
      await this.showFinalSummary(finalReport);
      
      return finalReport;
      
    } catch (error) {
      console.error('\n‚ùå ERROR FATAL:', error.message);
      console.log('\nüÜò Si el problema persiste:');
      console.log('   1. Verifica tu GEMINI_API_KEY');
      console.log('   2. Revisa la conexi√≥n a internet');
      console.log('   3. Ejecuta: node run-adsense-system.js --help');
      
      process.exit(1);
    }
  }

  async showFinalSummary(report) {
    const endTime = Date.now();
    const duration = Math.round((endTime - this.startTime) / 1000 / 60);
    
    console.log('\n' + '='.repeat(80));
    console.log('üéâ EJECUCI√ìN COMPLETADA');
    console.log('='.repeat(80));
    
    console.log(`‚è±Ô∏è  Duraci√≥n: ${duration} minutos`);
    console.log(`üéØ Modo ejecutado: ${CONFIG.EXECUTION_MODE}`);
    console.log(`üìä Estado: ${report ? '√âXITO' : 'ERROR'}`);
    
    if (CONFIG.EXECUTION_MODE === 'full' && report) {
      console.log('\nüìà RESUMEN COMPLETO:');
      console.log(`   üìù Art√≠culos generados: ${report.content_summary?.premium_articles_generated || 0}`);
      console.log(`   üîß Art√≠culos mejorados: ${report.content_summary?.existing_articles_improved || 0}`);
      console.log(`   üí∞ Archivos con AdSense: ${report.adsense_integration?.files_processed || 0}`);
      console.log(`   ‚úÖ Score de calidad: ${report.quality_validation?.overall_compliance || 'N/A'}%`);
    }
    
    console.log('\nüéØ PR√ìXIMOS PASOS:');
    console.log('   1. Revisar los reportes generados en /reports/');
    console.log('   2. Verificar que AdSense se muestre correctamente');
    console.log('   3. Probar en dispositivos m√≥viles');
    console.log('   4. Aplicar a Google AdSense cuando est√© listo');
    console.log('   5. Monitorear m√©tricas y performance');
    
    console.log('\nüìÅ ARCHIVOS GENERADOS:');
    console.log('   ‚Ä¢ Art√≠culos nuevos: /public/blog/');
    console.log('   ‚Ä¢ Art√≠culos mejorados: /public/blog-improved/');
    console.log('   ‚Ä¢ Reportes: /reports/');
    console.log('   ‚Ä¢ Backups: /backups/');
    
    console.log('\nüí° CONSEJOS:');
    console.log('   ‚Ä¢ Mant√©n contenido fresco y actualizado');
    console.log('   ‚Ä¢ Monitorea las pol√≠ticas de AdSense');
    console.log('   ‚Ä¢ Optimiza basado en m√©tricas de usuario');
    console.log('   ‚Ä¢ Genera contenido regularmente');
    
    console.log('\nüöÄ ¬°SISTEMA ADSENSE LISTO!');
    console.log('='.repeat(80));
  }
}

// === FUNCI√ìN PRINCIPAL ===
async function main() {
  // Manejar argumentos de ayuda
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showHelp();
    process.exit(0);
  }
  
  // Validar configuraci√≥n
  validateConfig();
  
  // Ejecutar sistema
  const runner = new AdSenseSystemRunner();
  await runner.execute();
}

// === MANEJO DE ERRORES Y SE√ëALES ===
process.on('uncaughtException', (error) => {
  console.error('\nüí• Error no capturado:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('\nüí• Promesa rechazada:', reason);
  process.exit(1);
});

process.on('SIGINT', () => {
  console.log('\n‚èπÔ∏è Ejecuci√≥n interrumpida por usuario');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚èπÔ∏è Ejecuci√≥n terminada');
  process.exit(0);
});

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });
}

export default AdSenseSystemRunner;
